/*! Skelet. v3.2.1 | MIT License | (c) 2021 Selekkt. | https://selekkt.dk/skelet/v3/ */
*, html, body { box-sizing: border-box; }

/* normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
html{line-height:1.15;-webkit-text-size-adjust:100%}
body{margin:0}
main{display:block}
h1{font-size:2em;margin:.67em 0}
hr{box-sizing:content-box;overflow:visible} /* chrome has problems with <hr size=""> if height:0; (so it was removed) */
pre{font-family:monospace,monospace;font-size:1em}
a{background-color:transparent}
abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}
b,strong{font-weight:bolder}
code,kbd,samp{font-family:monospace,monospace;font-size:1em}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sub{bottom:-.25em}
sup{top:-.5em}
img{border-style:none}
button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}
button,input{overflow:visible}
button,select{text-transform:none}
button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}
button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}
button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}
fieldset{padding:.35em .75em .625em}
legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}
progress{vertical-align:baseline}
textarea{overflow:auto}
[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}
[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}
[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}
[type="search"]::-webkit-search-decoration{-webkit-appearance:none}
::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}
details{display:block}
summary{display:list-item}

/* ------------------
  css variables
------------------ */
/*** Defaults */
:root {
    /* Typography */
    --fontFamily: "Inter", "HelveticaNeue", "Helvetica Neue", "Helvetica", "Arial", -apple-system, BlinkMacSystemFont, -system-ui, system-ui, sans-serif;
    --fontFamilyVar: "Inter var", "HelveticaNeue", "Helvetica Neue", "Helvetica", "Arial", -apple-system, BlinkMacSystemFont, -system-ui, system-ui, sans-serif;
    --fontFamilyHeadings: var(--fontFamily);

    --fontSize: 1.7rem;
    --fontLine: 1.6;
    --fontWeight: 400;

    --h1Size: 5.0rem;
    --h2Size: 4.2rem;
    --h3Size: 3.6rem;
    --h4Size: 3.0rem;
    --h5Size: 2.4rem;
    --h6Size: 1.8rem;

    --hWeight: 600;

    --hLine: 1.5;
    --h1Line: var(--hLine);
    --h2Line: var(--hLine);
    --h3Line: var(--hLine);
    --h4Line: var(--hLine);
    --h5Line: var(--hLine);
    --h6Line: var(--hLine);

    --padding: 1rem;
    --margin: 0.5rem;
    --radius: 0.5rem;
    --borderWidth: 1px;
    --borderStyle: solid;
    --hrMargin: calc(var(--margin) * 5);
    --pMargin: var(--margin);

    /* @for input/textarea/tables etc. */
    --boxPadding: var(--padding);
    --boxMargin: var(--margin);
    --boxRadius: var(--radius);
    --boxBorderWidth: var(--borderWidth);
    --boxBorderStyle: var(--borderStyle);
    --boxFontSize: var(--fontSize);
    --boxHeight: 21px;

    --buttonPadding: var(--padding);
    --buttonMargin: var(--margin);
    --buttonRadius: var(--radius);
    --buttonBorderWidth: var(--borderWidth);
    --buttonBorderStyle: var(--borderStyle);
    --buttonFontSize: var(--fontSize);

    /* grids */
    --columnGap: 1rem;
    --rowGap: 2rem;

    /* tooltip */
    --tooltipRadius: 0.5rem;
    --tooltipFontSize: 1.2rem;
    --tooltipMove: 4px; 
    --tooltipDuration: 190ms;

/** Colors */
    /* These colors DO NOT 
        change in Dark mode */
    --primary: #007FFF;
    --green: #34C84A;
    --yellow: #FDBC40;
    --red: #FC615D;
    --blue: #007FFF;
    --white: #FFFFFF;
    --black: #000000;
    --light: #efefef;
    --dark: #181818;
    --shadow: rgba(10, 10, 10, 0.1);

    --linkColor: var(--primary);
    --linkHover: #3298ff;

    /* @for tooltip */
    --tooltipBgColor: var(--dark);
    --tooltipColor: var(--white);

    /** These colors
      DO change in dark mode */
    --bgColor: #FFFFFF;
    --color: #000000;
    --colorInverse: #FFFFFF;
    --colorHeadings: var(--color);

    /* @for input/textarea/tables etc. */
    --boxColor: var(--color);
    --boxBorderColor: #E1E1E1;
    --boxBorderHover: #BABABA;
    --boxBorderActive: var(--primary);
    --boxBgColor: #fefefe;
    --boxPlaceholderColor: var(--color);

    /* @for checkbox/radio/.switch */
    --boxActive: var(--primary);
    --boxActiveInner: var(--white);
    --boxFocus: 2px rgba(41, 145, 248, .3);

    /* @for buttons */
    --buttonBgColor: transparent;
    --buttonColor: var(--color);
    --buttonColorHover: var(--color);
    --buttonBorderColor: currentColor;
    --buttonBorderHover: currentColor;

    --selectionBg: rgba(0,0,0,.99);
    --selectionText: #FFFFFF;

    --codeColor: #0000ff;
    --codeBgColor: #f8f8f8;

    --hrColor: rgba(255, 255, 255, 0);
}

/*** Dark Mode */
[dark-mode], [data-mode="dark"],
#dark-mode, .dark-mode {
    --bgColor: #000000;
    --color: #FFFFFF;
    --colorInverse: #000000;
    --colorHeadings: var(--color);
    --boxPlaceholderColor: var(--color);

    --boxColor: var(--color);
    --boxBorderColor: #232323;
    --boxBorderHover: #444444;
    --boxBgColor: #111111;
    --boxPlaceholderColor: var(--color);

    --buttonColor: var(--color);
    --buttonColorHover: var(--color);
    --buttonBorderColor: currentColor;
    --buttonBorderHover: currentColor;

    --selectionBg: rgba(255,255,255,.99);
    --selectionText: #000;

    --codeColor: #00F900;
    --codeBgColor: #111111;

    --hrColor: rgba(0, 0, 0, 0);
}

/* ------------------
  more resets
------------------ */
*:focus { outline:none }
:not(pre) > code, :not(pre) > kbd, :not(pre) > samp { font-size: 1.2rem; font-family: Consolas, monospace, serif; white-space: nowrap; }
img,svg,video,canvas,audio,iframe,embed,object,dd { display: block; vertical-align: middle; box-sizing: border-box; max-width: 100%; height: auto; }
dt {font-weight:bold}
dd {margin-inline-start:4rem}
figure {margin:0}
[hidden], template, iframe {display:none}

/* ------------------
  basics
------------------ */
html { height: 100%; font-size: 62.5%; scroll-behavior: smooth; }

body {
    background-color: var(--bgColor);
    color: var(--color);
    font-size: var(--fontSize);
    line-height: var(--fontLine);
    font-weight: var(--fontWeight);
    font-family: var(--fontFamily);
}

#app { display: flex; min-height: 100vh; flex-direction: column; }
main { flex: 1; }

::selection { background: var(--selectionBg); color: var(--selectionText); }
::-moz-selection { background: var(--selectionBg); color: var(--selectionText); }

/* ------------------
  typography
------------------ */
h1, h2, h3, h4, h5, h6, 
.h1,.h2,.h3,.h4,.h5,.h6 { font-family: var(--fontFamilyHeadings); font-size: var(--hSize); font-weight: var(--hWeight); line-height: var(--hLine); color: var(--colorHeadings); margin-top: 0; margin-bottom: 0.7rem;  }

h1,.h1 { --hSize: var(--h1Size); --hLine: var(--h1Line); }
h2,.h2 { --hSize: var(--h2Size); --hLine: var(--h2Line); }
h3,.h3 { --hSize: var(--h3Size); --hLine: var(--h3Line); }
h4,.h4 { --hSize: var(--h4Size); --hLine: var(--h4Line); }
h5,.h5 { --hSize: var(--h5Size); --hLine: var(--h5Line); }
h6,.h6 { --hSize: var(--h6Size); --hLine: var(--h6Line); }

@media (max-width: 600px) {
    :root {
        --h1Size: 4.0rem;
        --h2Size: 3.6rem;
        --h3Size: 3.0rem;
        --h4Size: 2.4rem;
        --h5Size: 2.1rem;
        --h6Size: 1.8rem;

        --hLine: 1.2;
        --h1Line: var(--hLine);
        --h2Line: var(--hLine);
        --h3Line: var(--hLine);
        --h4Line: var(--hLine);
        --h5Line: var(--hLine);
        --h6Line: var(--hLine);
    }
}

p {margin:var(--pMargin)}

blockquote {
    font-family: "Times New Roman", Times, serif;
    font-size: 2rem;
    line-height: 1.7;
    padding: 2rem;
    max-width: 90%;
    margin: 2rem auto;
}

a:not(.button) { color: var(--linkColor); cursor: pointer; }
a:not(.button):hover { color: var(--linkHover); }
a:not(.button):active, a:not(.button):hover { outline: 0; }
a.no-style { text-decoration: none; }

[flow-col], [flow-col-s], [flow-col-l] { column-count: var(--column-count); column-gap: var(--columnGap); column-fill: balance }

[flow-col="1"] { --column-count: 1 }
[flow-col="2"] { --column-count: 2 }
[flow-col="3"] { --column-count: 3 }
[flow-col="4"] { --column-count: 4 }
[flow-col="5"] { --column-count: 5 }
[flow-col="6"] { --column-count: 6 }
[flow-col="7"] { --column-count: 7 }
[flow-col="8"] { --column-count: 8 }

@media (max-width: 600px) {
    [flow-col-s="1"] { --column-count: 1 }
    [flow-col-s="2"] { --column-count: 2 }
    [flow-col-s="3"] { --column-count: 3 }
    [flow-col-s="4"] { --column-count: 4 }
    [flow-col-s="5"] { --column-count: 5 }
    [flow-col-s="6"] { --column-count: 6 }
    [flow-col-s="7"] { --column-count: 7 }
    [flow-col-s="8"] { --column-count: 8 }
}

@media (min-width: 601px) and (max-width: 1024px) {
    [flow-col-m="1"] { --column-count: 1 }
    [flow-col-m="2"] { --column-count: 2 }
    [flow-col-m="3"] { --column-count: 3 }
    [flow-col-m="4"] { --column-count: 4 }
    [flow-col-m="5"] { --column-count: 5 }
    [flow-col-m="6"] { --column-count: 6 }
    [flow-col-m="7"] { --column-count: 7 }
    [flow-col-m="8"] { --column-count: 8 }
}

@media (min-width: 1599px) {
    [flow-col-l="1"] { --column-count: 1 }
    [flow-col-l="2"] { --column-count: 2 }
    [flow-col-l="3"] { --column-count: 3 }
    [flow-col-l="4"] { --column-count: 4 }
    [flow-col-l="5"] { --column-count: 5 }
    [flow-col-l="6"] { --column-count: 6 }
    [flow-col-l="7"] { --column-count: 7 }
    [flow-col-l="8"] { --column-count: 8 }
}

code {
    padding: calc(var(--padding) - 0.5rem);
    margin: var(--margin);
    font-size: 90%;
    white-space: nowrap;
    vertical-align: middle;
    background-color: var(--codeBgColor);
    border: 1px solid var(--boxBorderColor);
    color: var(--codeColor);
    border-radius: var(--radius);
    overflow: auto;
}

pre > code { display: block; padding: calc(var(--padding) * 1); white-space: pre; }

/* ------------------
  utilities
------------------ */
.clearfix:after, .container:after { content: ""; display: table; clear: both; }

.fullwidth { width: 100%; box-sizing: border-box; }
.fullwidth-max { max-width: 100%; box-sizing: border-box; }

.block { display: block; }
.inline { display: inline; margin: 0; }
.inline-block { display: inline-block; margin: 0; }
.center { display: block; text-align: center; margin: 0 auto; }

.nowrap { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.text-start { text-align: start; }
.text-center { text-align: center; }
.text-end { text-align: end; }
.text-justify { text-align: justify; }

.float-right { float: right; }
.float-left { float: left; }
.float-none { float: none; }

.sticky { position: sticky; top: 0; }
.sticky-bottom { position: sticky; bottom: 0; }
.sticky-none { position: inherit; }

@media (max-width: 600px) { 
    .fullwidth-s { width: 100%; box-sizing: border-box; }
    .fullwidth-max-s { max-width: 100%; box-sizing: border-box; }

    .block-s { display: block; }
    .inline-s { display: inline; margin: 0; }
    .inline-block-s { display: inline-block; margin: 0; }
    .center-s { display: block; text-align: center; margin: 0 auto; }

    .nowrap-s { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .text-start-s { text-align: start; }
    .text-center-s { text-align: center; }
    .text-end-s { text-align: end; }
    .text-justify-s { text-align: justify; }

    .float-right-s { float: right; }
    .float-left-s { float: left; }
    .float-none-s { float: none; }

    .sticky-s { position: sticky; top: 0; }
    .sticky-bottom-s { position: sticky; bottom: 0 }
    .sticky-none-s { position: inherit; }
}

@media (min-width: 601px) and (max-width: 1024px) {
    .fullwidth-m { width: 100%; box-sizing: border-box; }
    .fullwidth-max-m { max-width: 100%; box-sizing: border-box; }

    .block-m { display: block; }
    .inline-m { display: inline; margin: 0; }
    .inline-block-m { display: inline-block; margin: 0; }
    .center-m { display: block; text-align: center; margin: 0 auto; }

    .nowrap-m { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .text-start-m { text-align: start; }
    .text-center-m { text-align: center; }
    .text-end-m { text-align: end; }
    .text-justify-m { text-align: justify; }

    .float-right-m { float: right; }
    .float-meft-m { float: left; }
    .float-none-m { float: none; }

    .sticky-m { position: sticky; top: 0; }
    .sticky-bottom-m { position: sticky; bottom: 0 }
    .sticky-none-m { position: inherit; }
}

@media (min-width: 1599px) { 
    .fullwidth-l { width: 100%; box-sizing: border-box; }
    .fullwidth-max-l { max-width: 100%; box-sizing: border-box; }

    .block-l { display: block; }
    .inline-l { display: inline; margin: 0; }
    .inline-block-l { display: inline-block; margin: 0; }
    .center-l { display: block; text-align: center; margin: 0 auto; }

    .nowrap-l { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .text-start-l { text-align: start; }
    .text-center-l { text-align: center; }
    .text-end-l { text-align: end; }
    .text-justify-l { text-align: justify; }

    .float-right-l { float: right; }
    .float-left-l { float: left; }
    .float-none-l { float: none; }

    .sticky-l { position: sticky; top: 0; }
    .sticky-bottom-l { position: sticky; bottom: 0 }
    .sticky-none-l { position: inherit; }
}

[class^="space"] { display: block; width: 100%; margin: var(--spacer, 3rem) auto; }
.space  { --spacer: 3rem; }
.space1 { --spacer: 5rem; }
.space2 { --spacer: 7rem; }
.space3 { --spacer: 9rem; }
.space4 { --spacer: 11rem; }
.space5 { --spacer: 13rem; }

/* Vertical and Horizontal align :: you need to create a parent container to which the object itself will be aligned. */
.center-axyz, .center-axys { display: flex; align-items: center; justify-content: center; }
.center-axyz.full, .center-axys.full { height: 100vh; width: 100%; }
@media (max-width: 600px) { .center-axyz-s, .center-axys-s { display: flex; align-items: center; justify-content: center; } .center-axyz-s.full-s, .center-axys-s.full-s  { height: 100vh; width: 100%; } }
@media (min-width: 1024px) { .center-axyz-m, .center-axys-m { display: flex; align-items: center; justify-content: center; } .center-axyz-m.full-m, .center-axys-m.full-m { height: 100vh; width: 100%; } }
@media (min-width: 1599px) { .center-axyz-l, .center-axys-l { display: flex; align-items: center; justify-content: center; } .center-axyz-l.full-l, .center-axys-l.full-l { height: 100vh; width: 100%; } }

.mob-scroller { display: flex; flex-wrap: nowrap; white-space: nowrap; overflow: hidden; overflow-x: auto; height: auto; width: 100%; scroll-behavior: smooth; -webkit-overflow-scrolling: touch; }
@media (max-width: 1024px) { .mob-scroller::-webkit-scrollbar { display:none } }

@media (max-width: 600px) { .large-only, .only-large  { display:none!important } }
@media (min-width: 601px) { .small-only, .only-small  { display:none!important } }

.no-scrollbars { scrollbar-width: none; -ms-overflow-style: none; -moz-scrollbars-none; }
.no-scrollbars::-webkit-scrollbar { display:none }
@media (max-width: 600px) { .no-scrollbars-s { scrollbar-width: none; -ms-overflow-style: none; -moz-scrollbars-none; } .no-scrollbars-s::-webkit-scrollbar { display: none; } }
@media (min-width: 1024px) { .no-scrollbars-m { scrollbar-width: none; -ms-overflow-style: none; -moz-scrollbars-none; } .no-scrollbars-m::-webkit-scrollbar { display: none; } }
@media (min-width: 1599px) { .no-scrollbars-l { scrollbar-width: none; -ms-overflow-style: none; -moz-scrollbars-none; } .no-scrollbars-l::-webkit-scrollbar { display: none; } }

.scroll-snap {
    --scrollDirection: x;
    --scrollType: mandatory;
    --scrollAlign: center;
    --scrollMargin: 1rem;
    --scrollStop: normal;
    --scrollJustifyContent: start;
    --scrollAlignItems: center;
    display: flex;
    flex: none;
    flex-flow: row nowrap;
    column-gap: var(--scrollMargin);
    justify-content: var(--scrollJustifyContent);
    align-items: var(--scrollAlignItems);
    white-space: nowrap;
    overflow: auto;
    counter-reset: item;
    scroll-behavior: smooth;
    scroll-snap-points-x: repeat(100%);
    scroll-margin: var(--scrollMargin);
    scroll-snap-align: start;
    scroll-snap-stop: var(--scrollStop);
    scroll-snap-type: var(--scrollDirection) var(--scrollType);
}
.scroll-snap > * { width: auto; flex: none; scroll-snap-align: var(--scrollAlign); }
.scroll-snap.y { --scrollDirection: y; } /* default */
.scroll-snap.x { --scrollDirection: x; }
.scroll-snap.mandatory { --scrollType: mandatory; } /* default */
.scroll-snap.proximity { --scrollType: proximity; }
.scroll-snap.align-center { --scrollAlign: center; } /* default */
.scroll-snap.align-startEnd { --scrollAlign: start end; }
.scroll-snap.stop-always { --scrollAlign: center; } /* default */
.scroll-snap.stop-normal { --scrollAlign: start end; }

/* ------------------
  tooltips
------------------ */
button[aria-label][data-tooltip-pos] { overflow: visible; }
[aria-label][data-tooltip-pos] { position: relative; cursor: pointer; }

[aria-label][data-tooltip-pos]:after {
    content: attr(aria-label);
    position: absolute;
    z-index: 99;
    padding: 1rem;
    opacity: 0;
    pointer-events: none;
    box-sizing: border-box;
    background-color: var(--tooltipBgColor);
    border-radius: var(--tooltipRadius);
    color: var(--tooltipColor);
    font-family: var(--fontFamily);
    font-size: var(--tooltipFontSize)!important;
    font-weight: normal;
    font-style: normal;
    text-shadow: none;
    text-indent: 0;
    text-transform: initial;
    text-align: center;
    letter-spacing: normal;
    line-height: 1.3;
    white-space: nowrap;
    transition: all var(--tooltipDuration) ease-in-out var(--tooltipDuration);
}
[aria-label][data-tooltip-pos]:before {
    content: "";
    position: absolute;
    z-index: 99;
    width: 0;
    height: 0;
    border: 5px solid transparent;
    border-top-color: var(--tooltipBgColor);
    opacity: 0;
    pointer-events: none;
    transition: all var(--tooltipDuration) ease-in-out var(--tooltipDuration);
}
[aria-label][data-tooltip-pos]:hover:before, [aria-label][data-tooltip-pos]:hover:after, [aria-label][data-tooltip-pos][data-tooltip-visible]:before,[aria-label][data-tooltip-pos][data-tooltip-visible]:after,[aria-label][data-tooltip-pos]:not([data-tooltip-nofocus]):focus:before,[aria-label][data-tooltip-pos]:not([data-tooltip-nofocus]):focus:after { opacity: 1; pointer-events: none;  }
[aria-label][data-tooltip-pos].font-awesome:after { font-family: FontAwesome, var(--fontFamily); }
[aria-label][data-tooltip-pos][data-tooltip-break]:after { white-space: pre; }
[aria-label][data-tooltip-pos][data-tooltip-break][data-tooltip-length]:after { white-space: pre-line; word-break: break-word; }
[aria-label][data-tooltip-pos][data-tooltip-blunt]:before, [aria-label][data-tooltip-pos][data-tooltip-blunt]:after { transition: none; }
[aria-label][data-tooltip-pos][data-tooltip-pos="up"]:hover:after,[aria-label][data-tooltip-pos][data-tooltip-pos="up"][data-tooltip-visible]:after,[aria-label][data-tooltip-pos][data-tooltip-pos="down"]:hover:after, [aria-label][data-tooltip-pos][data-tooltip-pos="down"][data-tooltip-visible]:after { transform: translate(-50%, 0); }
[aria-label][data-tooltip-pos][data-tooltip-pos="up"]:hover:before,[aria-label][data-tooltip-pos][data-tooltip-pos="up"][data-tooltip-visible]:before,[aria-label][data-tooltip-pos][data-tooltip-pos="down"]:hover:before, [aria-label][data-tooltip-pos][data-tooltip-pos="down"][data-tooltip-visible]:before { transform: translate(-50%, 0); }
[aria-label][data-tooltip-pos][data-tooltip-pos*="-left"]:after { left: 0; }
[aria-label][data-tooltip-pos][data-tooltip-pos*="-left"]:before { left: 5px; }
[aria-label][data-tooltip-pos][data-tooltip-pos*="-right"]:after { right: 0; }
[aria-label][data-tooltip-pos][data-tooltip-pos*="-right"]:before { right: 5px; }
[aria-label][data-tooltip-pos][data-tooltip-po*="-left"]:hover:after, [aria-label][data-tooltip-pos][data-tooltip-po*="-left"][data-tooltip-visible]:after,[aria-label][data-tooltip-pos][data-tooltip-pos*="-right"]:hover:after,[aria-label][data-tooltip-pos][data-tooltip-pos*="-right"][data-tooltip-visible]:after { transform: translate(0, 0); }
[aria-label][data-tooltip-pos][data-tooltip-po*="-left"]:hover:before, [aria-label][data-tooltip-pos][data-tooltip-po*="-left"][data-tooltip-visible]:before,[aria-label][data-tooltip-pos][data-tooltip-pos*="-right"]:hover:before,[aria-label][data-tooltip-pos][data-tooltip-pos*="-right"][data-tooltip-visible]:before { transform: translate(0, 0); }
[aria-label][data-tooltip-pos][data-tooltip-pos^="up"]:before, [aria-label][data-tooltip-pos][data-tooltip-pos^="up"]:after { bottom: 100%; transform-origin: top; transform: translate(0, var(--tooltipMove)); }
[aria-label][data-tooltip-pos][data-tooltip-pos^="up"]:after { margin-bottom: 10px; }
[aria-label][data-tooltip-pos][data-tooltip-pos="up"]:before, [aria-label][data-tooltip-pos][data-tooltip-pos="up"]:after { left: 50%; transform: translate(-50%, var(--tooltipMove)); }
[aria-label][data-tooltip-pos][data-tooltip-pos^="down"]:before, [aria-label][data-tooltip-pos][data-tooltip-pos^="down"]:after { top: 100%; transform: translate(0, calc(var(--tooltipMove) * -1)); }
[aria-label][data-tooltip-pos][data-tooltip-pos^="down"]:after { margin-top: 10px; }
[aria-label][data-tooltip-pos][data-tooltip-pos^="down"]:before { width: 0; height: 0; border: 5px solid transparent; border-bottom-color: var(--tooltipBgColor); }
[aria-label][data-tooltip-pos][data-tooltip-pos="down"]:after, [aria-label][data-tooltip-pos][data-tooltip-pos="down"]:before { left: 50%; transform: translate(-50%, calc(var(--tooltipMove) * -1)); }
[aria-label][data-tooltip-pos][data-tooltip-pos="left"]:hover:after, [aria-label][data-tooltip-pos][data-tooltip-pos="left"][data-tooltip-visible]:after, [aria-label][data-tooltip-pos][data-tooltip-pos="right"]:hover:after, [aria-label][data-tooltip-pos][data-tooltip-pos="right"][data-tooltip-visible]:after { transform: translate(0, -50%); }
[aria-label][data-tooltip-pos][data-tooltip-pos="left"]:hover:before, [aria-label][data-tooltip-pos][data-tooltip-pos="left"][data-tooltip-visible]:before, [aria-label][data-tooltip-pos][data-tooltip-pos="right"]:hover:before, [aria-label][data-tooltip-pos][data-tooltip-pos="right"][data-tooltip-visible]:before { transform: translate(0, -50%); }
[aria-label][data-tooltip-pos][data-tooltip-pos="left"]:after, [aria-label][data-tooltip-pos][data-tooltip-pos="left"]:before { right: 100%; top: 50%; transform: translate(var(--tooltipMove), -50%); }
[aria-label][data-tooltip-pos][data-tooltip-pos="left"]:after { margin-right: 10px; }
[aria-label][data-tooltip-pos][data-tooltip-pos="left"]:before { width: 0; height: 0; border: 5px solid transparent; border-left-color: var(--tooltipBgColor); }
[aria-label][data-tooltip-pos][data-tooltip-pos="right"]:after, [aria-label][data-tooltip-pos][data-tooltip-pos="right"]:before { left: 100%; top: 50%; transform: translate(calc(var(--tooltipMove) * -1), -50%); }
[aria-label][data-tooltip-pos][data-tooltip-pos="right"]:after { margin-left: 10px; }
[aria-label][data-tooltip-pos][data-tooltip-pos="right"]:before { width: 0; height: 0; border: 5px solid transparent; border-right-color: var(--tooltipBgColor); }
[aria-label][data-tooltip-pos][data-tooltip-length]:after { white-space: normal; }
[aria-label][data-tooltip-pos][data-tooltip-length="small"]:after { width: 80px; }
[aria-label][data-tooltip-pos][data-tooltip-length="medium"]:after { width: 150px; }
[aria-label][data-tooltip-pos][data-tooltip-length="large"]:after { width: 260px; }
[aria-label][data-tooltip-pos][data-tooltip-length="xlarge"]:after { width: 380px; }
[aria-label][data-tooltip-pos][data-tooltip-length="fit"]:after { width: 100%; }
@media (max-width: 1024px) { [aria-label][data-tooltip-pos][data-tooltip-length="xlarge"]:after { width: 90vw; }  }

/* ------------------
  elements
------------------ */
.is-green { border-color: var(--green); }
.is-red, input:invalid { border-color: var(--red); }

/* ------------------
  buttons
------------------ */
.button, button, 
input[type="submit"], 
input[type="reset"], 
input[type="button"] {
    display: inline-block;
    padding: var(--buttonPadding);
    color: var(--buttonColor);
    font-size: var(--buttonFontSize);
    white-space: nowrap;
    letter-spacing: .1rem;
    font-weight: 600;
    font-style: inherit;
    text-align: center;
    text-transform: uppercase;
    text-decoration: none;
    background: var(--buttonBgColor);
    border-radius: var(--buttonRadius);
    border: var(--buttonBorderWidth) var(--buttonBorderStyle) var(--buttonBorderColor);
    cursor: pointer;
    box-sizing: border-box; 
    transition: border 150ms ease-in-out;
}

.button:hover, button:hover,
input[type="submit"]:hover, 
input[type="reset"]:hover, 
input[type="button"]:hover,
.button:focus, button:focus,
input[type="submit"]:focus, 
input[type="reset"]:focus, 
input[type="button"]:focus {
    color: var(--buttonColorHover);
    border-color: var(--buttonBorderHover);
    opacity: 0.9;
    outline: 0; 
}

.button[disabled], button[disabled], input[disabled] { opacity: 0.5; cursor: not-allowed; }

/* Spacing */
button, .button { vertical-align: baseline; }

/* Button Stylings */
button[class*="is-"], .button[class*="is-"] { border-color: transparent; }
button[class*="is-"]:hover, .button[class*="is-"]:hover { border-color: transparent; } 

button.is-white,.button.is-white  { --buttonBgColor: var(--white); --buttonColor: var(--black); }
button.is-light,.button.is-light  { --buttonBgColor: var(--light); --buttonColor: var(--dark); }
button.is-dark,.button.is-dark    { --buttonBgColor: var(--dark); --buttonColor: var(--light); }
button.is-black,.button.is-black  { --buttonBgColor: var(--black); --buttonColor: var(--white); }
button.is-blank,.button.is-blank  { --buttonBgColor: none; --buttonColor: var(--color); --buttonBorderColor: none; }

button.is-outline,.button.is-outline { transition: border 0; background: none; border: var(--buttonBorderWidth) var(--buttonBorderStyle) var(--buttonBorderColor); color: var(--buttonColor); }
button:hover.is-outline,.button:hover.is-outline { color: var(--buttonColorHover); border-color: var(--buttonBorderHover); }

button.is-primary,.button.is-primary  { --buttonBgColor: var(--primary); --buttonColor: var(--white); }
button.is-green,.button.is-green  { --buttonBgColor: var(--green); --buttonColor: var(--white); }
button.is-yellow,.button.is-yellow  { --buttonBgColor: var(--yellow); --buttonColor: var(--black); }
button.is-red,.button.is-red   { --buttonBgColor: var(--red); --buttonColor: var(--white); }
button.is-blue,.button.is-blue  { --buttonBgColor: var(--blue); --buttonColor: var(--white); }

button.is-small,.button.is-small { padding: var(--buttonPadding); font-size: 0.9rem; }
button.is-large,.button.is-large { padding: calc(var(--buttonPadding) * 1); margin: var(--buttonMargin) auto; font-size: 2rem; }

/** Radio Checkbox Switch */
input[type='checkbox'],
input[type='radio'] {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    height: var(--boxHeight);
    outline: none;
    display: inline-block;
    vertical-align: top;
    position: relative;
    margin: 0;
    cursor: pointer;
    border: 1px solid var(--bc, var(--boxBorderColor));
    background: var(--b, var(--boxBgColor));
    -webkit-transition: background .3s, border-color .3s, box-shadow .2s;
    transition: background .3s, border-color .3s, box-shadow .2s;
}

input[type='checkbox']:after,
input[type='radio']:after {
    content: '';
    display: block;
    left: 0;
    top: 0;
    position: absolute;
    -webkit-transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
    transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s);
    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
}

input[type='checkbox']:checked,
input[type='radio']:checked {
    --b: var(--boxActive);
    --bc: var(--boxActive);
    --d-o: 100ms;
    --d-t: 300ms;
    --d-t-e: var(--easeInOutSine);
}

/* Disabled */
input[type='checkbox']:disabled,input[type='radio']:disabled { filter: grayscale(100%); cursor: not-allowed; opacity: .9; }
input[type='checkbox']:disabled:checked,input[type='radio']:disabled:checked { filter: grayscale(100%); }
input[type='checkbox']:disabled + label, input[type='radio']:disabled + label { cursor: not-allowed; }

input[type='checkbox']:hover:not(:checked):not(:disabled),
input[type='radio']:hover:not(:checked):not(:disabled) { --bc: var(--boxBorderHover); }

input[type='checkbox']:focus, input[type='radio']:focus { box-shadow: 0 0 0 var(--boxFocus); }  
input[type='checkbox']:not(.switch), input[type='radio']:not(.switch) { width: 21px; }
input[type='checkbox']:not(.switch):after, input[type='radio']:not(.switch):after { opacity: var(--o, 0); }  
input[type='checkbox']:not(.switch):checked, input[type='radio']:not(.switch):checked { --o: 1; }
  
input[type='checkbox'] + label,
input[type='radio'] + label {
    font-size: 1.4rem;
    line-height: var(--boxHeight);
    display: inline-block;
    vertical-align: top;
    cursor: pointer;
    margin-left: 4px;
    user-select: none;
}

input[type='checkbox']:not(.switch) { border-radius: 3px; }

input[type='checkbox']:not(.switch):after {
    width: 5px;
    height: 9px;
    border: 2px solid var(--boxActiveInner);
    border-top: 0;
    border-left: 0;
    left: 6px;
    top: 2.5px;
    -webkit-transform: rotate(43deg);
    transform: rotate(43deg);
}

/* Switch */
input[type='checkbox'].switch { width: 38px; border-radius: 11px; }

input[type='checkbox'].switch:after {
    left: 2px;
    top: 2px;
    border-radius: 50%;
    width: 15px;
    height: 15px;
    background: var(--ab, var(--primary));
    -webkit-transform: translateX(var(--x, 0));
    transform: translateX(var(--x, 0));
}

input[type='checkbox'].switch:checked { --ab: var(--boxActiveInner); --x: 17px; }
input[type='checkbox'].switch:disabled:not(:checked):after { opacity: .6; }

/* Radio */
input[type='radio'] { border-radius: 50%; }

input[type='radio']:after {
    width: 19px;
    height: 19px;
    border-radius: 50%;
    background: var(--boxActiveInner);
    opacity: 0;
    -webkit-transform: scale(var(--s, 0.7));
    transform: scale(var(--s, 0.7));
}

input[type='radio']:checked { --s: .5; }

/* ------------------
  forms
------------------ */
::placeholder { color: var(--boxPlaceholderColor); }

input[type="color"], 
input[type="date"],
input[type="datetime-local"], 
input[type="email"],
input[type="file"], 
input[type="month"], 
input[type="number"], 
input[type="password"], 
input[type="search"], 
input[type="tel"], 
input[type="text"], 
input[type="time"], 
input[type="url"], 
input[type="week"],
input[inputmode],
select, 
textarea {
    padding: var(--boxPadding);
    color: var(--boxColor);
    background-color: var(--boxBgColor);
    border: 1px solid var(--boxBorderColor);
    border-radius: var(--radius);
    box-shadow: none;
    box-sizing: border-box;
    transition: border 0.15s ease-in-out;
    /* Removes default styles on some inputs in iOS */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

input[type="color"]:hover, 
input[type="date"]:hover,
input[type="datetime-local"]:hover, 
input[type="email"]:hover,
input[type="file"]:hover, 
input[type="month"]:hover, 
input[type="number"]:hover, 
input[type="password"]:hover, 
input[type="search"]:hover, 
input[type="tel"]:hover, 
input[type="text"]:hover, 
input[type="time"]:hover, 
input[type="url"]:hover, 
input[type="week"]:hover,
input[inputmode],
select:hover,
textarea:hover {
    border: 1px solid var(--boxBorderHover);
    outline: 0;
}

input[type="color"]:focus, 
input[type="date"]:focus,
input[type="datetime-local"]:focus, 
input[type="email"]:focus,
input[type="file"]:focus, 
input[type="month"]:focus, 
input[type="number"]:focus, 
input[type="password"]:focus, 
input[type="search"]:focus, 
input[type="tel"]:focus, 
input[type="text"]:focus, 
input[type="time"]:focus, 
input[type="url"]:focus, 
input[type="week"]:focus,
input[inputmode]:focus,
select:focus, 
textarea:focus {
    border: 1px solid var(--boxBorderActive);
    outline: 0; 
}

input[type="range"] { height: 2.25rem; line-height: 2.25rem; vertical-align: middle; width: 100%; }
input[type="color"] { padding: 0; border: none; }

textarea { min-height: 6.5rem; padding: var(--boxPadding); }
label, legend { display: inline-block; margin-bottom: var(--boxMargin); font-weight: 600; }
fieldset { border: 1px solid var(--boxBorderColor); border-radius: var(--boxRadius); }
legend { padding: var(--boxPadding); }
input, textarea, select, fieldset { margin-bottom: var(--boxMargin);  }
option { padding: 5px; }
label span { display: inline; color: var(--color); margin: 0 var(--boxMargin); font-weight: normal;  }

/* Float placeholder */
label.float { position: relative; }
label.float span { user-select: none; cursor: text; display: block; position: absolute; top: 0; left: 0; padding: 0; line-height: 1.3; margin: var(--boxPadding); color: var(--color); transition: all 0.2s var(--easeInOutSine); }
label.float input:focus + span, label.float input:not(:placeholder-shown) + span, 
label.float textarea:focus + span, label.float textarea:not(:placeholder-shown) + span { top: -3.5rem; left: 0; margin-left: var(--boxPadding); font-size: 70%; }
label.float input:not(:focus) + span, label.float textarea:not(:focus) + span { color: var(--boxPlaceholderColor); }
label.float input:placeholder-shown:not(:focus)::placeholder, label.float textarea:placeholder-shown:not(:focus)::placeholder { opacity: 0; }

select {
    background-image: linear-gradient(45deg, transparent 50%, var(--boxBorderColor) 50%), linear-gradient(135deg, var(--boxBorderColor) 50%, transparent 50%), linear-gradient(to right, var(--boxBorderColor), var(--boxBorderColor));
    background-position: calc(100% - 20px) calc(1em + 2px), calc(100% - 15px) calc(1em + 2px), calc(100% - 2.5em) 0.5em;
    background-size: 5px 5px, 5px 5px, 1px 1.5em;
    background-repeat: no-repeat;
    color: var(--boxColor);
    padding-right: 45px;
}

select:hover { outline: 0; color: var(--boxColor); background-image: linear-gradient(45deg, transparent 50%, var(--boxBorderHover) 50%), linear-gradient(135deg, var(--boxBorderHover) 50%, transparent 50%), linear-gradient(to right, var(--boxBorderHover), var(--boxBorderHover)); }
select:focus { outline: 0; color: var(--boxColor); background-image: linear-gradient(45deg, transparent 50%, var(--boxBorderActive) 50%), linear-gradient(135deg, var(--boxBorderActive) 50%, transparent 50%), linear-gradient(to right, var(--boxBorderActive), var(--boxBorderActive)); }
select:-moz-focusring { outline: 0; color:transparent; text-shadow: 0 0 0 var(--color); }

/* ------------------
  lists
------------------ */
ul { list-style: disc inside; }
ol { list-style: decimal inside; }
ul, ol { padding-left: 0; margin-top: 0; }
ul ul, ul ol, ol ol, ol ul { margin: 1.5rem 0 1.5rem 3rem; font-size: 100%; }
li { margin-bottom: var(--margin); }

.inline li { display: inline-block; list-style: none; margin: 0; padding: 0; }
ul.no-style, ol.no-style { list-style: none; margin: 0; padding: 0; }
ul.no-style ul, ol.no-style ol {list-style:none}
ul.indent, ol.indent { margin: 1.5rem 0 1.5rem 3rem; }

ul.disc {list-style-type:disc}
ul.circle {list-style-type:circle}
ul.square {list-style-type:square}
ol.roman {list-style-type:upper-roman}
ol.alpha {list-style-type:lower-alpha}
ol.decimal {list-style-type:decimal}
ul.inside,ol.inside {list-style-position:inside}
ul.outside,ol.outside {list-style-position:outside}

/* ---------------------
  hr - horizontal rules
--------------------- */
hr { margin: var(--hrMargin) auto; background-color: var(--boxBorderColor); border: 0 none; width: 95%; }
hr:not([size]) { height: 1px; }
hr.full { width: 100%; }
hr.gradient { background-color: transparent; background-image: linear-gradient(to right, var(--hrColor) 0%, var(--boxBorderColor) 50%, var(--hrColor) 100%); }

/* Line w/ text: --- text --- */
.text-hr { display: flex; align-items: center; text-align: center; margin: calc(var(--margin) * 5) auto; }
.text-hr::before, .text-hr::after { content: ''; flex: 1; border-bottom: 1px solid var(--boxBorderColor); }
.text-hr::before { margin-right: var(--padding); }
.text-hr::after { margin-left: var(--padding); }

/* ------------------
  tables
------------------ */
table { width: 100%; }
th, td { padding: var(--padding); text-align: left; border-bottom: 1px solid var(--boxBorderColor); }

table.is-bordered { border: 1px solid var(--boxBorderColor); border-radius: var(--radius); }
table.is-bordered th { background-color: var(--boxBorderColor); }
table.is-bordered th, table.is-bordered td { border-bottom: 1px solid var(--boxBorderColor); }
table.is-bordered > tbody > tr:last-child td { border-bottom: none; }
table.is-striped tbody tr:nth-child(2n) { background-color: var(--boxBorderColor); }
table.is-striped td { border:none; }

/* ------------------
  raster / css grid
------------------ */
/** Grid */
grid {
    display: grid;
    grid-row-gap: var(--rowGap, 2rem);
    grid-column-gap: var(--columnGap, 1rem);
    row-gap: var(--rowGap, 2rem);
    column-gap: var(--columnGap, 1rem);
    grid-template-columns: var(--grid-tc); /* default columns */ 
    --grid-tc: repeat(4, 1fr);
    --grid-cs: 1; /* column start */
    --grid-ce: -1 /* column end */
}

grid.compact { grid-row-gap: 0; row-gap: 0; }
grid > c > img, grid > c > p > img { -o-object-fit: contain; object-fit: contain; max-width: 100% }

/* c -- cell or column */
grid > c { display: block; appearance: none; -webkit-appearance: none; }

grid[columns="1"] { --grid-tc: repeat(1, 1fr) }
grid[columns="2"] { --grid-tc: repeat(2, 1fr) }
grid[columns="3"] { --grid-tc: repeat(3, 1fr) }
grid[columns="4"] { --grid-tc: repeat(4, 1fr) }
grid[columns="5"] { --grid-tc: repeat(5, 1fr) }
grid[columns="6"] { --grid-tc: repeat(6, 1fr) }
grid[columns="7"] { --grid-tc: repeat(7, 1fr) }
grid[columns="8"] { --grid-tc: repeat(8, 1fr) }
grid[columns="9"] { --grid-tc: repeat(9, 1fr) }
grid[columns="10"] { --grid-tc: repeat(10, 1fr) }
grid[columns="11"] { --grid-tc: repeat(11, 1fr) }
grid[columns="12"] { --grid-tc: repeat(12, 1fr) }
grid[columns="13"] { --grid-tc: repeat(13, 1fr) }
grid[columns="14"] { --grid-tc: repeat(14, 1fr) }
grid[columns="15"] { --grid-tc: repeat(15, 1fr) }
grid[columns="16"] { --grid-tc: repeat(16, 1fr) }

/* span=start... */
grid > c[span^="1"] { --grid-cs: 1 }
grid > c[span^="2"] { --grid-cs: 2 }
grid > c[span^="3"] { --grid-cs: 3 }
grid > c[span^="4"] { --grid-cs: 4 }
grid > c[span^="5"] { --grid-cs: 5 }
grid > c[span^="6"] { --grid-cs: 6 }
grid > c[span^="7"] { --grid-cs: 7 }
grid > c[span^="8"] { --grid-cs: 8 }
grid > c[span^="9"] { --grid-cs: 9 }
grid > c[span^="10"] { --grid-cs: 10 }
grid > c[span^="11"] { --grid-cs: 11 }
grid > c[span^="12"] { --grid-cs: 12 }
grid > c[span^="13"] { --grid-cs: 13 }
grid > c[span^="14"] { --grid-cs: 14 }
grid > c[span^="15"] { --grid-cs: 15 }
grid > c[span^="16"] { --grid-cs: 16 }

/* span=...+width, span=...-end */
grid > c[span$="+1"], grid > c[span="1"] { --grid-ce: 1 }
grid > c[span$="+2"], grid > c[span$="-1"], grid > c[span="2"] { --grid-ce: 2 }
grid > c[span$="+3"], grid > c[span$="-2"], grid > c[span="3"] { --grid-ce: 3 }
grid > c[span$="+4"], grid > c[span$="-3"], grid > c[span="4"] { --grid-ce: 4 }
grid > c[span$="+5"], grid > c[span$="-4"], grid > c[span="5"] { --grid-ce: 5 }
grid > c[span$="+6"], grid > c[span$="-5"], grid > c[span="6"] { --grid-ce: 6 }
grid > c[span$="+7"], grid > c[span$="-6"], grid > c[span="7"] { --grid-ce: 7 }
grid > c[span$="+8"], grid > c[span$="-7"], grid > c[span="8"] { --grid-ce: 8 }
grid > c[span$="+9"], grid > c[span$="-8"], grid > c[span="9"] { --grid-ce: 9 }
grid > c[span$="+10"], grid > c[span$="-9"], grid > c[span="10"] { --grid-ce: 10 }
grid > c[span$="+11"], grid > c[span$="-10"], grid > c[span="11"] { --grid-ce: 11 }
grid > c[span$="+12"], grid > c[span$="-11"], grid > c[span="12"] { --grid-ce: 12 }
grid > c[span$="+13"], grid > c[span$="-12"], grid > c[span="13"] { --grid-ce: 13 }
grid > c[span$="+14"], grid > c[span$="-13"], grid > c[span="14"] { --grid-ce: 14 }
grid > c[span$="+15"], grid > c[span$="-14"], grid > c[span="15"] { --grid-ce: 15 }
grid > c[span$="+16"], grid > c[span$="-15"], grid > c[span="16"] { --grid-ce: 16 }
grid > c[span$="-16"] { --grid-ce: 17 }

/* connect vars */
grid > c[span] { grid-column-end: span var(--grid-ce); }
grid > c[span*="+"], grid > c[span*="-"], grid > c[span*=".."] { grid-column-start: var(--grid-cs); }
grid > c[span*="-"], grid > c[span*=".."] { grid-column-end: var(--grid-ce); }
grid > c[span="row"] { grid-column: 1 / -1 }

/* Justify CONTENT - for <grid> */
grid[jc="start"] { justify-content: start; }
grid[jc="center"] { justify-content: center; }
grid[jc="end"] { justify-content: end; }
grid[jc="stretch"] { justify-content: stretch; }
grid[jc="around"] { justify-content: space-around; }
grid[jc="between"] { justify-content: space-between; }
grid[jc="evenly"] { justify-content: space-evenly; }

/* Justify ITEMS - for <grid> */
grid[ji="start"] { justify-items: start; }
grid[ji="center"] { justify-items: center; }
grid[ji="end"] { justify-items: end; }
grid[ji="stretch"] { justify-items: stretch; }

/* Align ITEMS - for <grid> */
grid[ai="start"] { align-items: start; }
grid[ai="center"] { align-items: center; }
grid[ai="end"] { align-items: end; }
grid[ai="stretch"] { align-items: stretch; }

/* Align CONTENT - for <grid> */
grid[ac="start"] { align-content: start; }
grid[ac="center"] { align-content: center; }
grid[ac="end"] { align-content: end; }
grid[ac="stretch"] { align-content: stretch; }
grid[ac="around"] { align-content: space-around; }
grid[ac="between"] { align-content: space-between; }
grid[ac="evenly"] { align-content: space-evenly; }

/* Align SELF - for <c> */
grid > c[as="start"] { align-self: start; }
grid > c[as="center"] { align-self: center; }
grid > c[as="end"] { align-self: end; }
grid > c[as="stretch"] { align-self: stretch; }

/* Justify SELF - for <c> */
grid > c[js="start"] { justify-self: start; }
grid > c[js="center"] { justify-self: center; }
grid > c[js="end"] { justify-self: end; }
grid > c[js="stretch"] { justify-self: stretch; }


/* Place ITEMS - for <grid> – place-items: align-items justify-items; */
grid[pi="start"] { place-items: start; }
grid[pi="center"] { place-items: center; }
grid[pi="end"] { place-items: end; }
grid[pi="stretch"] { place-items: stretch; }

grid[pi="start center"] { place-items: start center; }
grid[pi="start end"] { place-items: start end; }
grid[pi="start stretch"] { place-items: start stretch; }

grid[pi="center start"] { place-items: center start; }
grid[pi="center end"] { place-items: center end; }
grid[pi="center stretch"] { place-items: center stretch; }

grid[pi="end start"] { place-items: end start; }
grid[pi="end center"] { place-items: end center; }
grid[pi="end stretch"] { place-items: end stretch; }

grid[pi="stretch start"] { place-items: stretch start; }
grid[pi="stretch center"] { place-items: stretch center; }
grid[pi="stretch end"] { place-items: stretch end; }

/* Place SELF - for <c> – place-self: align-self justify-self; */
grid > c[ps="start"] { place-self: start; }
grid > c[ps="center"] { place-self: center; }
grid > c[ps="end"] { place-self: end; }
grid > c[ps="stretch"] { place-self: stretch; }

grid > c[ps="start center"] { place-self: start center; }
grid > c[ps="start end"] { place-self: start end; }
grid > c[ps="start stretch"] { place-self: start stretch; }

grid > c[ps="center start"] { place-self: center start; }
grid > c[ps="center end"] { place-self: center end; }
grid > c[ps="center stretch"] { place-self: center stretch; }

grid > c[ps="end start"] { place-self: end start; }
grid > c[ps="end center"] { place-self: end center; }
grid > c[ps="end stretch"] { place-self: end stretch; }

grid > c[ps="stretch start"] { place-self: stretch start; }
grid > c[ps="stretch center"] { place-self: stretch center; }
grid > c[ps="stretch end"] { place-self: stretch end; }

/* VISUAL ORDER */
[order="first"] { order: -1; }
[order="1"] { order: 1; }
[order="2"] { order: 2; }
[order="3"] { order: 3; }
[order="4"] { order: 4; }
[order="5"] { order: 5; }
[order="6"] { order: 6; }
[order="7"] { order: 7; }
[order="8"] { order: 8; }
[order="9"] { order: 9; }
[order="10"] { order: 10; }
[order="11"] { order: 11; }
[order="12"] { order: 12; }
[order="13"] { order: 13; }
[order="14"] { order: 14; }
[order="15"] { order: 15; }
[order="16"] { order: 16; }
[order="last"] { order: 99; }

/* for window width <= 600 */
@media (max-width: 600px) {
  grid[columns-s="1"] { --grid-tc: repeat(1, 1fr) }
  grid[columns-s="2"] { --grid-tc: repeat(2, 1fr) }
  grid[columns-s="3"] { --grid-tc: repeat(3, 1fr) }
  grid[columns-s="4"] { --grid-tc: repeat(4, 1fr) }
  grid[columns-s="5"] { --grid-tc: repeat(5, 1fr) }
  grid[columns-s="6"] { --grid-tc: repeat(6, 1fr) }
  grid[columns-s="7"] { --grid-tc: repeat(7, 1fr) }
  grid[columns-s="8"] { --grid-tc: repeat(8, 1fr) }
  grid[columns-s="9"] { --grid-tc: repeat(9, 1fr) }
  grid[columns-s="10"] { --grid-tc: repeat(10, 1fr) }
  grid[columns-s="11"] { --grid-tc: repeat(11, 1fr) }
  grid[columns-s="12"] { --grid-tc: repeat(12, 1fr) }
  grid[columns-s="13"] { --grid-tc: repeat(13, 1fr) }
  grid[columns-s="14"] { --grid-tc: repeat(14, 1fr) }
  grid[columns-s="15"] { --grid-tc: repeat(15, 1fr) }
  grid[columns-s="16"] { --grid-tc: repeat(16, 1fr) }
  
  /* span-s=start... */
  grid > c[span-s^="1"] { --grid-cs: 1 }
  grid > c[span-s^="2"] { --grid-cs: 2 }
  grid > c[span-s^="3"] { --grid-cs: 3 }
  grid > c[span-s^="4"] { --grid-cs: 4 }
  grid > c[span-s^="5"] { --grid-cs: 5 }
  grid > c[span-s^="6"] { --grid-cs: 6 }
  grid > c[span-s^="7"] { --grid-cs: 7 }
  grid > c[span-s^="8"] { --grid-cs: 8 }
  grid > c[span-s^="9"] { --grid-cs: 9 }
  grid > c[span-s^="10"] { --grid-cs: 10 }
  grid > c[span-s^="11"] { --grid-cs: 11 }
  grid > c[span-s^="12"] { --grid-cs: 12 }
  grid > c[span-s^="13"] { --grid-cs: 13 }
  grid > c[span-s^="14"] { --grid-cs: 14 }
  grid > c[span-s^="15"] { --grid-cs: 15 }
  grid > c[span-s^="16"] { --grid-cs: 16 }
  
  /* span-s=...+width, span-s=...-end */
  grid > c[span-s$="+1"], grid > c[span-s="1"] { --grid-ce: 1 }
  grid > c[span-s$="+2"], grid > c[span-s$="-1"], grid > c[span-s="2"] { --grid-ce: 2 }
  grid > c[span-s$="+3"], grid > c[span-s$="-2"], grid > c[span-s="3"] { --grid-ce: 3 }
  grid > c[span-s$="+4"], grid > c[span-s$="-3"], grid > c[span-s="4"] { --grid-ce: 4 }
  grid > c[span-s$="+5"], grid > c[span-s$="-4"], grid > c[span-s="5"] { --grid-ce: 5 }
  grid > c[span-s$="+6"], grid > c[span-s$="-5"], grid > c[span-s="6"] { --grid-ce: 6 }
  grid > c[span-s$="+7"], grid > c[span-s$="-6"], grid > c[span-s="7"] { --grid-ce: 7 }
  grid > c[span-s$="+8"], grid > c[span-s$="-7"], grid > c[span-s="8"] { --grid-ce: 8 }
  grid > c[span-s$="+9"], grid > c[span-s$="-8"], grid > c[span-s="9"] { --grid-ce: 9 }
  grid > c[span-s$="+10"], grid > c[span-s$="-9"], grid > c[span-s="10"] { --grid-ce: 10 }
  grid > c[span-s$="+11"], grid > c[span-s$="-10"], grid > c[span-s="11"] { --grid-ce: 11 }
  grid > c[span-s$="+12"], grid > c[span-s$="-11"], grid > c[span-s="12"] { --grid-ce: 12 }
  grid > c[span-s$="+13"], grid > c[span-s$="-12"], grid > c[span-s="13"] { --grid-ce: 13 }
  grid > c[span-s$="+14"], grid > c[span-s$="-13"], grid > c[span-s="14"] { --grid-ce: 14 }
  grid > c[span-s$="+15"], grid > c[span-s$="-14"], grid > c[span-s="15"] { --grid-ce: 15 }
  grid > c[span-s$="+16"], grid > c[span-s$="-15"], grid > c[span-s="16"] { --grid-ce: 16 }
  grid > c[span-s$="-16"] { --grid-ce: 17 }
  
  /* connect vars */
  grid > c[span-s] { grid-column-end: span var(--grid-ce) }
  grid > c[span-s*="+"], grid > c[span-s*="-"], grid > c[span-s*=".."] { grid-column-start: var(--grid-cs) }
  grid > c[span-s*="-"], grid > c[span-s*=".."] { grid-column-end: var(--grid-ce) }
  grid > c[span-s="row"] { grid-column: 1 / -1 }

  /* Justify CONTENT - for <grid> */
  grid[jc-s="start"] { justify-content: start; }
  grid[jc-s="center"] { justify-content: center; }
  grid[jc-s="end"] { justify-content: end; }
  grid[jc-s="stretch"] { justify-content: stretch; }
  grid[jc-s="around"] { justify-content: space-around; }
  grid[jc-s="between"] { justify-content: space-between; }
  grid[jc-s="evenly"] { justify-content: space-evenly; }
  
  /* Justify ITEMS - for <grid> */
  grid[ji-s="start"] { justify-items: start; }
  grid[ji-s="center"] { justify-items: center; }
  grid[ji-s="end"] { justify-items: end; }
  grid[ji-s="stretch"] { justify-items: stretch; }
  
  /* Align ITEMS - for <grid> */
  grid[ai-s="start"] { align-items: start; }
  grid[ai-s="center"] { align-items: center; }
  grid[ai-s="end"] { align-items: end; }
  grid[ai-s="stretch"] { align-items: stretch; }
  
  /* Align CONTENT - for <grid> */
  grid[ac-s="start"] { align-content: start; }
  grid[ac-s="center"] { align-content: center; }
  grid[ac-s="end"] { align-content: end; }
  grid[ac-s="stretch"] { align-content: stretch; }
  grid[ac-s="around"] { align-content: space-around; }
  grid[ac-s="between"] { align-content: space-between; }
  grid[ac-s="evenly"] { align-content: space-evenly; }
  
  /* Align SELF - for <c> */
  grid > c[as-s="start"] { align-self: start; }
  grid > c[as-s="center"] { align-self: center; }
  grid > c[as-s="end"] { align-self: end; }
  grid > c[as-s="stretch"] { align-self: stretch; }
  
  /* Justify SELF - for <c> */
  grid > c[js-s="start"] { justify-self: start; }
  grid > c[js-s="center"] { justify-self: center; }
  grid > c[js-s="end"] { justify-self: end; }
  grid > c[js-s="stretch"] { justify-self: stretch; }


  /* Place ITEMS - for <grid> */
  grid[pi-s="start"] { place-items: start; }
  grid[pi-s="center"] { place-items: center; }
  grid[pi-s="end"] { place-items: end; }
  grid[pi-s="stretch"] { place-items: stretch; }

  grid[pi-s="start center"] { place-items: start center; }
  grid[pi-s="start end"] { place-items: start end; }
  grid[pi-s="start stretch"] { place-items: start stretch; }

  grid[pi-s="center start"] { place-items: center start; }
  grid[pi-s="center end"] { place-items: center end; }
  grid[pi-s="center stretch"] { place-items: center stretch; }

  grid[pi-s="end start"] { place-items: end start; }
  grid[pi-s="end center"] { place-items: end center; }
  grid[pi-s="end stretch"] { place-items: end stretch; }

  grid[pi-s="stretch start"] { place-items: stretch start; }
  grid[pi-s="stretch center"] { place-items: stretch center; }
  grid[pi-s="stretch end"] { place-items: stretch end; }

  /* Place SELF - for <c> */
  grid > c[ps-s="start"] { place-self: start; }
  grid > c[ps-s="center"] { place-self: center; }
  grid > c[ps-s="end"] { place-self: end; }
  grid > c[ps-s="stretch"] { place-self: stretch; }

  grid > c[ps-s="start center"] { place-self: start center; }
  grid > c[ps-s="start end"] { place-self: start end; }
  grid > c[ps-s="start stretch"] { place-self: start stretch; }

  grid > c[ps-s="center start"] { place-self: center start; }
  grid > c[ps-s="center end"] { place-self: center end; }
  grid > c[ps-s="center stretch"] { place-self: center stretch; }

  grid > c[ps-s="end start"] { place-self: end start; }
  grid > c[ps-s="end center"] { place-self: end center; }
  grid > c[ps-s="end stretch"] { place-self: end stretch; }

  grid > c[ps-s="stretch start"] { place-self: stretch start; }
  grid > c[ps-s="stretch center"] { place-self: stretch center; }
  grid > c[ps-s="stretch end"] { place-self: stretch end; }

  /* VISUAL ORDER */
  [order-s="first"] { order: -1; }
  [order-s="1"] { order: 1; }
  [order-s="2"] { order: 2; }
  [order-s="3"] { order: 3; }
  [order-s="4"] { order: 4; }
  [order-s="5"] { order: 5; }
  [order-s="6"] { order: 6; }
  [order-s="7"] { order: 7; }
  [order-s="8"] { order: 8; }
  [order-s="9"] { order: 9; }
  [order-s="10"] { order: 10; }
  [order-s="11"] { order: 11; }
  [order-s="12"] { order: 12; }
  [order-s="13"] { order: 13; }
  [order-s="14"] { order: 14; }
  [order-s="15"] { order: 15; }
  [order-s="16"] { order: 16; }
  [order-s="last"] { order: 99; }
}

/* for window width 601px <> 1024px */
@media (min-width: 601px) and (max-width: 1024px) {
  grid[columns-m="1"] { --grid-tc: repeat(1, 1fr) }
  grid[columns-m="2"] { --grid-tc: repeat(2, 1fr) }
  grid[columns-m="3"] { --grid-tc: repeat(3, 1fr) }
  grid[columns-m="4"] { --grid-tc: repeat(4, 1fr) }
  grid[columns-m="5"] { --grid-tc: repeat(5, 1fr) }
  grid[columns-m="6"] { --grid-tc: repeat(6, 1fr) }
  grid[columns-m="7"] { --grid-tc: repeat(7, 1fr) }
  grid[columns-m="8"] { --grid-tc: repeat(8, 1fr) }
  grid[columns-m="9"] { --grid-tc: repeat(9, 1fr) }
  grid[columns-m="10"] { --grid-tc: repeat(10, 1fr) }
  grid[columns-m="11"] { --grid-tc: repeat(11, 1fr) }
  grid[columns-m="12"] { --grid-tc: repeat(12, 1fr) }
  grid[columns-m="13"] { --grid-tc: repeat(13, 1fr) }
  grid[columns-m="14"] { --grid-tc: repeat(14, 1fr) }
  grid[columns-m="15"] { --grid-tc: repeat(15, 1fr) }
  grid[columns-m="16"] { --grid-tc: repeat(16, 1fr) }
  
  /* span-m=start... */
  grid > c[span-m^="1"] { --grid-cs: 1 }
  grid > c[span-m^="2"] { --grid-cs: 2 }
  grid > c[span-m^="3"] { --grid-cs: 3 }
  grid > c[span-m^="4"] { --grid-cs: 4 }
  grid > c[span-m^="5"] { --grid-cs: 5 }
  grid > c[span-m^="6"] { --grid-cs: 6 }
  grid > c[span-m^="7"] { --grid-cs: 7 }
  grid > c[span-m^="8"] { --grid-cs: 8 }
  grid > c[span-m^="9"] { --grid-cs: 9 }
  grid > c[span-m^="10"] { --grid-cs: 10 }
  grid > c[span-m^="11"] { --grid-cs: 11 }
  grid > c[span-m^="12"] { --grid-cs: 12 }
  grid > c[span-m^="13"] { --grid-cs: 13 }
  grid > c[span-m^="14"] { --grid-cs: 14 }
  grid > c[span-m^="15"] { --grid-cs: 15 }
  grid > c[span-m^="16"] { --grid-cs: 16 }
  
  /* span-m=...+width, span-m=...-end */
  grid > c[span-m$="+1"], grid > c[span-m="1"] { --grid-ce: 1 }
  grid > c[span-m$="+2"], grid > c[span-m$="-1"], grid > c[span-m="2"] { --grid-ce: 2 }
  grid > c[span-m$="+3"], grid > c[span-m$="-2"], grid > c[span-m="3"] { --grid-ce: 3 }
  grid > c[span-m$="+4"], grid > c[span-m$="-3"], grid > c[span-m="4"] { --grid-ce: 4 }
  grid > c[span-m$="+5"], grid > c[span-m$="-4"], grid > c[span-m="5"] { --grid-ce: 5 }
  grid > c[span-m$="+6"], grid > c[span-m$="-5"], grid > c[span-m="6"] { --grid-ce: 6 }
  grid > c[span-m$="+7"], grid > c[span-m$="-6"], grid > c[span-m="7"] { --grid-ce: 7 }
  grid > c[span-m$="+8"], grid > c[span-m$="-7"], grid > c[span-m="8"] { --grid-ce: 8 }
  grid > c[span-m$="+9"], grid > c[span-m$="-8"], grid > c[span-m="9"] { --grid-ce: 9 }
  grid > c[span-m$="+10"], grid > c[span-m$="-9"], grid > c[span-m="10"] { --grid-ce: 10 }
  grid > c[span-m$="+11"], grid > c[span-m$="-10"], grid > c[span-m="11"] { --grid-ce: 11 }
  grid > c[span-m$="+12"], grid > c[span-m$="-11"], grid > c[span-m="12"] { --grid-ce: 12 }
  grid > c[span-m$="+13"], grid > c[span-m$="-12"], grid > c[span-m="13"] { --grid-ce: 13 }
  grid > c[span-m$="+14"], grid > c[span-m$="-13"], grid > c[span-m="14"] { --grid-ce: 14 }
  grid > c[span-m$="+15"], grid > c[span-m$="-14"], grid > c[span-m="15"] { --grid-ce: 15 }
  grid > c[span-m$="+16"], grid > c[span-m$="-15"], grid > c[span-m="16"] { --grid-ce: 16 }
  grid > c[span-m$="-16"] { --grid-ce: 17 }
  
  /* connect vars */
  grid > c[span-m] { grid-column-end: span var(--grid-ce) }
  grid > c[span-m*="+"], grid > c[span-m*="-"], grid > c[span-m*=".."] { grid-column-start: var(--grid-cs) }
  grid > c[span-m*="-"], grid > c[span-m*=".."] { grid-column-end: var(--grid-ce) }
  grid > c[span-m="row"] { grid-column: 1 / -1 }

  /* Justify CONTENT - for <grid> */
  grid[jc-m="start"] { justify-content: start; }
  grid[jc-m="center"] { justify-content: center; }
  grid[jc-m="end"] { justify-content: end; }
  grid[jc-m="stretch"] { justify-content: stretch; }
  grid[jc-m="around"] { justify-content: space-around; }
  grid[jc-m="between"] { justify-content: space-between; }
  grid[jc-m="evenly"] { justify-content: space-evenly; }

  /* Justify ITEMS - for <grid> */
  grid[ji-m="start"] { justify-items: start; }
  grid[ji-m="center"] { justify-items: center; }
  grid[ji-m="end"] { justify-items: end; }
  grid[ji-m="stretch"] { justify-items: stretch; }

  /* Align ITEMS - for <grid> */
  grid[ai-m="start"] { align-items: start; }
  grid[ai-m="center"] { align-items: center; }
  grid[ai-m="end"] { align-items: end; }
  grid[ai-m="stretch"] { align-items: stretch; }

  /* Align CONTENT - for <grid> */
  grid[ac-m="start"] { align-content: start; }
  grid[ac-m="center"] { align-content: center; }
  grid[ac-m="end"] { align-content: end; }
  grid[ac-m="stretch"] { align-content: stretch; }
  grid[ac-m="around"] { align-content: space-around; }
  grid[ac-m="between"] { align-content: space-between; }
  grid[ac-m="evenly"] { align-content: space-evenly; }

  /* Align SELF - for <c> */
  grid > c[as-m="start"] { align-self: start; }
  grid > c[as-m="center"] { align-self: center; }
  grid > c[as-m="end"] { align-self: end; }
  grid > c[as-m="stretch"] { align-self: stretch; }

  /* Justify SELF - for <c> */
  grid > c[js-m="start"] { justify-self: start; }
  grid > c[js-m="center"] { justify-self: center; }
  grid > c[js-m="end"] { justify-self: end; }
  grid > c[js-m="stretch"] { justify-self: stretch; }


  /* Place ITEMS - for <grid> */
  grid[pi-m="start"] { place-items: start; }
  grid[pi-m="center"] { place-items: center; }
  grid[pi-m="end"] { place-items: end; }
  grid[pi-m="stretch"] { place-items: stretch; }

  grid[pi-m="start center"] { place-items: start center; }
  grid[pi-m="start end"] { place-items: start end; }
  grid[pi-m="start stretch"] { place-items: start stretch; }

  grid[pi-m="center start"] { place-items: center start; }
  grid[pi-m="center end"] { place-items: center end; }
  grid[pi-m="center stretch"] { place-items: center stretch; }

  grid[pi-m="end start"] { place-items: end start; }
  grid[pi-m="end center"] { place-items: end center; }
  grid[pi-m="end stretch"] { place-items: end stretch; }

  grid[pi-m="stretch start"] { place-items: stretch start; }
  grid[pi-m="stretch center"] { place-items: stretch center; }
  grid[pi-m="stretch end"] { place-items: stretch end; }

  /* Place SELF - for <c> */
  grid > c[ps-m="start"] { place-self: start; }
  grid > c[ps-m="center"] { place-self: center; }
  grid > c[ps-m="end"] { place-self: end; }
  grid > c[ps-m="stretch"] { place-self: stretch; }

  grid > c[ps-m="start center"] { place-self: start center; }
  grid > c[ps-m="start end"] { place-self: start end; }
  grid > c[ps-m="start stretch"] { place-self: start stretch; }

  grid > c[ps-m="center start"] { place-self: center start; }
  grid > c[ps-m="center end"] { place-self: center end; }
  grid > c[ps-m="center stretch"] { place-self: center stretch; }

  grid > c[ps-m="end start"] { place-self: end start; }
  grid > c[ps-m="end center"] { place-self: end center; }
  grid > c[ps-m="end stretch"] { place-self: end stretch; }

  grid > c[ps-m="stretch start"] { place-self: stretch start; }
  grid > c[ps-m="stretch center"] { place-self: stretch center; }
  grid > c[ps-m="stretch end"] { place-self: stretch end; }

  /* VISUAL ORDER */
  [order-m="first"] { order: -1; }
  [order-m="1"] { order: 1; }
  [order-m="2"] { order: 2; }
  [order-m="3"] { order: 3; }
  [order-m="4"] { order: 4; }
  [order-m="5"] { order: 5; }
  [order-m="6"] { order: 6; }
  [order-m="7"] { order: 7; }
  [order-m="8"] { order: 8; }
  [order-m="9"] { order: 9; }
  [order-m="10"] { order: 10; }
  [order-m="11"] { order: 11; }
  [order-m="12"] { order: 12; }
  [order-m="13"] { order: 13; }
  [order-m="14"] { order: 14; }
  [order-m="15"] { order: 15; }
  [order-m="16"] { order: 16; }
  [order-m="last"] { order: 99; }
}

/* for window width >= 1600 */
@media (min-width: 1599px) {
  grid[columns-l="1"] { --grid-tc: repeat(1, 1fr) }
  grid[columns-l="2"] { --grid-tc: repeat(2, 1fr) }
  grid[columns-l="3"] { --grid-tc: repeat(3, 1fr) }
  grid[columns-l="4"] { --grid-tc: repeat(4, 1fr) }
  grid[columns-l="5"] { --grid-tc: repeat(5, 1fr) }
  grid[columns-l="6"] { --grid-tc: repeat(6, 1fr) }
  grid[columns-l="7"] { --grid-tc: repeat(7, 1fr) }
  grid[columns-l="8"] { --grid-tc: repeat(8, 1fr) }
  grid[columns-l="9"] { --grid-tc: repeat(9, 1fr) }
  grid[columns-l="10"] { --grid-tc: repeat(10, 1fr) }
  grid[columns-l="11"] { --grid-tc: repeat(11, 1fr) }
  grid[columns-l="12"] { --grid-tc: repeat(12, 1fr) }
  grid[columns-l="13"] { --grid-tc: repeat(13, 1fr) }
  grid[columns-l="14"] { --grid-tc: repeat(14, 1fr) }
  grid[columns-l="15"] { --grid-tc: repeat(15, 1fr) }
  grid[columns-l="16"] { --grid-tc: repeat(16, 1fr) }
  
  /* span-l=start... */
  grid > c[span-l^="1"] { --grid-cs: 1 }
  grid > c[span-l^="2"] { --grid-cs: 2 }
  grid > c[span-l^="3"] { --grid-cs: 3 }
  grid > c[span-l^="4"] { --grid-cs: 4 }
  grid > c[span-l^="5"] { --grid-cs: 5 }
  grid > c[span-l^="6"] { --grid-cs: 6 }
  grid > c[span-l^="7"] { --grid-cs: 7 }
  grid > c[span-l^="8"] { --grid-cs: 8 }
  grid > c[span-l^="9"] { --grid-cs: 9 }
  grid > c[span-l^="10"] { --grid-cs: 10 }
  grid > c[span-l^="11"] { --grid-cs: 11 }
  grid > c[span-l^="12"] { --grid-cs: 12 }
  grid > c[span-l^="13"] { --grid-cs: 13 }
  grid > c[span-l^="14"] { --grid-cs: 14 }
  grid > c[span-l^="15"] { --grid-cs: 15 }
  grid > c[span-l^="16"] { --grid-cs: 16 }
  
  /* span-l=...+width, span-l=...-end */
  grid > c[span-l$="+1"], grid > c[span-l="1"] { --grid-ce: 1 }
  grid > c[span-l$="+2"], grid > c[span-l$="-1"], grid > c[span-l="2"] { --grid-ce: 2 }
  grid > c[span-l$="+3"], grid > c[span-l$="-2"], grid > c[span-l="3"] { --grid-ce: 3 }
  grid > c[span-l$="+4"], grid > c[span-l$="-3"], grid > c[span-l="4"] { --grid-ce: 4 }
  grid > c[span-l$="+5"], grid > c[span-l$="-4"], grid > c[span-l="5"] { --grid-ce: 5 }
  grid > c[span-l$="+6"], grid > c[span-l$="-5"], grid > c[span-l="6"] { --grid-ce: 6 }
  grid > c[span-l$="+7"], grid > c[span-l$="-6"], grid > c[span-l="7"] { --grid-ce: 7 }
  grid > c[span-l$="+8"], grid > c[span-l$="-7"], grid > c[span-l="8"] { --grid-ce: 8 }
  grid > c[span-l$="+9"], grid > c[span-l$="-8"], grid > c[span-l="9"] { --grid-ce: 9 }
  grid > c[span-l$="+10"], grid > c[span-l$="-9"], grid > c[span-l="10"] { --grid-ce: 10 }
  grid > c[span-l$="+11"], grid > c[span-l$="-10"], grid > c[span-l="11"] { --grid-ce: 11 }
  grid > c[span-l$="+12"], grid > c[span-l$="-11"], grid > c[span-l="12"] { --grid-ce: 12 }
  grid > c[span-l$="+13"], grid > c[span-l$="-12"], grid > c[span-l="13"] { --grid-ce: 13 }
  grid > c[span-l$="+14"], grid > c[span-l$="-13"], grid > c[span-l="14"] { --grid-ce: 14 }
  grid > c[span-l$="+15"], grid > c[span-l$="-14"], grid > c[span-l="15"] { --grid-ce: 15 }
  grid > c[span-l$="+16"], grid > c[span-l$="-15"], grid > c[span-l="16"] { --grid-ce: 16 }
  grid > c[span-l$="-16"] { --grid-ce: 17 }
  
  /* connect vars */
  grid > c[span-l] { grid-column-end: span var(--grid-ce) }
  grid > c[span-l*="+"], grid > c[span-l*="-"], grid > c[span-l*=".."] { grid-column-start: var(--grid-cs) }
  grid > c[span-l*="-"], grid > c[span-l*=".."] { grid-column-end: var(--grid-ce) }
  grid > c[span-l="row"] { grid-column: 1 / -1 }

  /* Justify CONTENT - for <grid> */
  grid[jc-l="start"] { justify-content: start; }
  grid[jc-l="center"] { justify-content: center; }
  grid[jc-l="end"] { justify-content: end; }
  grid[jc-l="stretch"] { justify-content: stretch; }
  grid[jc-l="around"] { justify-content: space-around; }
  grid[jc-l="between"] { justify-content: space-between; }
  grid[jc-l="evenly"] { justify-content: space-evenly; }

  /* Justify ITEMS - for <grid> */
  grid[ji-l="start"] { justify-items: start; }
  grid[ji-l="center"] { justify-items: center; }
  grid[ji-l="end"] { justify-items: end; }
  grid[ji-l="stretch"] { justify-items: stretch; }

  /* Align ITEMS - for <grid> */
  grid[ai-l="start"] { align-items: start; }
  grid[ai-l="center"] { align-items: center; }
  grid[ai-l="end"] { align-items: end; }
  grid[ai-l="stretch"] { align-items: stretch; }

  /* Align CONTENT - for <grid> */
  grid[ac-l="start"] { align-content: start; }
  grid[ac-l="center"] { align-content: center; }
  grid[ac-l="end"] { align-content: end; }
  grid[ac-l="stretch"] { align-content: stretch; }
  grid[ac-l="around"] { align-content: space-around; }
  grid[ac-l="between"] { align-content: space-between; }
  grid[ac-l="evenly"] { align-content: space-evenly; }

  /* Align SELF - for <c> */
  grid > c[as-l="start"] { align-self: start; }
  grid > c[as-l="center"] { align-self: center; }
  grid > c[as-l="end"] { align-self: end; }
  grid > c[as-l="stretch"] { align-self: stretch; }

  /* Justify SELF - for <c> */
  grid > c[js-l="start"] { justify-self: start; }
  grid > c[js-l="center"] { justify-self: center; }
  grid > c[js-l="end"] { justify-self: end; }
  grid > c[js-l="stretch"] { justify-self: stretch; }


  /* Place ITEMS - for <grid> */
  grid[pi-l="start"] { place-items: start; }
  grid[pi-l="center"] { place-items: center; }
  grid[pi-l="end"] { place-items: end; }
  grid[pi-l="stretch"] { place-items: stretch; }

  grid[pi-l="start center"] { place-items: start center; }
  grid[pi-l="start end"] { place-items: start end; }
  grid[pi-l="start stretch"] { place-items: start stretch; }

  grid[pi-l="center start"] { place-items: center start; }
  grid[pi-l="center end"] { place-items: center end; }
  grid[pi-l="center stretch"] { place-items: center stretch; }

  grid[pi-l="end start"] { place-items: end start; }
  grid[pi-l="end center"] { place-items: end center; }
  grid[pi-l="end stretch"] { place-items: end stretch; }

  grid[pi-l="stretch start"] { place-items: stretch start; }
  grid[pi-l="stretch center"] { place-items: stretch center; }
  grid[pi-l="stretch end"] { place-items: stretch end; }

  /* Place SELF - for <c> */
  grid > c[ps-l="start"] { place-self: start; }
  grid > c[ps-l="center"] { place-self: center; }
  grid > c[ps-l="end"] { place-self: end; }
  grid > c[ps-l="stretch"] { place-self: stretch; }

  grid > c[ps-l="start center"] { place-self: start center; }
  grid > c[ps-l="start end"] { place-self: start end; }
  grid > c[ps-l="start stretch"] { place-self: start stretch; }

  grid > c[ps-l="center start"] { place-self: center start; }
  grid > c[ps-l="center end"] { place-self: center end; }
  grid > c[ps-l="center stretch"] { place-self: center stretch; }

  grid > c[ps-l="end start"] { place-self: end start; }
  grid > c[ps-l="end center"] { place-self: end center; }
  grid > c[ps-l="end stretch"] { place-self: end stretch; }

  grid > c[ps-l="stretch start"] { place-self: stretch start; }
  grid > c[ps-l="stretch center"] { place-self: stretch center; }
  grid > c[ps-l="stretch end"] { place-self: stretch end; }

  /* VISUAL ORDER */
  [order-l="first"] { order: -1; }
  [order-l="1"] { order: 1; }
  [order-l="2"] { order: 2; }
  [order-l="3"] { order: 3; }
  [order-l="4"] { order: 4; }
  [order-l="5"] { order: 5; }
  [order-l="6"] { order: 6; }
  [order-l="7"] { order: 7; }
  [order-l="8"] { order: 8; }
  [order-l="9"] { order: 9; }
  [order-l="10"] { order: 10; }
  [order-l="11"] { order: 11; }
  [order-l="12"] { order: 12; }
  [order-l="13"] { order: 13; }
  [order-l="14"] { order: 14; }
  [order-l="15"] { order: 15; }
  [order-l="16"] { order: 16; }
  [order-l="last"] { order: 99; }
}

/* .debug can be added to a grid to visualize its effective cells */
grid.debug>*{ --color:rgba(248,110,91,0.3); background-image:-webkit-gradient(linear,left top,left bottom,from(var(--color)),to(var(--color))); background-image:linear-gradient(180deg,var(--color) 0,var(--color)) }
grid.debug>:nth-child(6n+2){ --color:rgba(103,126,208,0.3) }
grid.debug>:nth-child(6n+3){ --color:rgba(224,174,72,0.3) }
grid.debug>:nth-child(6n+4){ --color:rgba(77,214,115,0.3) }
grid.debug>:nth-child(6n+5){ --color:rgba(217,103,219,0.3) }
grid.debug>:nth-child(6n+6){ --color:rgba(94,204,211,0.3) }
grid.debug>:nth-child(6n+7){ --color:rgba(248,110,91,0.3) }

/* ------------------
  flexbox
------------------ */
/*  FLEX CONTAINER */
flex { display: flex; }
flex > * { flex: 0 1 auto; appearance: none; -webkit-appearance: none; padding: 0 var(--rowGap); }
flex > * > img, flex > * > p > img { -o-object-fit: contain; object-fit: contain; max-width: 100% }

/*  FLEX DIRECTION */
flex[direction="column"] { flex-direction: column; }
flex[direction="column-reverse"] { flex-direction: column-reverse; }
flex[direction="row"] { flex-direction: row; }
flex[direction="row-reverse"] { flex-direction: row-reverse; }

/* WRAPPING */
flex[wrap],flex[wrap="wrap"] { flex-wrap: wrap; }
flex[wrap="nowrap"] { flex-wrap: nowrap; }
flex[wrap="reverse"] { flex-wrap: wrap-reverse; }

/* JUSTIFICATION */
flex[jc="start"] { justify-content: flex-start; }
flex[jc="center"] { justify-content: center; }
flex[jc="end"] { justify-content: flex-end; }
flex[jc="between"] { justify-content: space-between; }
flex[jc="around"] { justify-content: space-around; }

/* ALIGN CONTENT */
flex[ac="start"] { align-content: flex-start; }
flex[ac="end"] { align-content: flex-end; }
flex[ac="center"] { align-content: center; }
flex[ac="between"] { align-content: space-between; }
flex[ac="around"] { align-content: space-around; }
flex[ac="stretch"] { align-content: stretch; }

/* ALIGN ITEMS */
flex[ai="start"] { align-items: start; }
flex[ai="center"] { align-items: center; }
flex[ai="end"] { align-items: end; }
flex[ai="flex-start"] { align-items: flex-start; }
flex[ai="flex-end"] { align-items: flex-end; }
flex[ai="baseline"] { align-items: baseline; }
flex[ai="stretch"] { align-items: stretch; }
/* Baseline alignment */
flex[ai="first baseline"] { align-items: first baseline; }
flex[ai="last baseline"] { align-items: last baseline; } /* Overflow alignment (for positional alignment only) */ 
flex[ai="safe center"] { align-items: safe center; }
flex[ai="unsafe center"] { align-items: unsafe center; }

/* ALIGN SELF */
flex > c[as="auto"] { align-self: auto; }
flex > c[as="start"] { align-self: flex-start; }
flex > c[as="end"] { align-self: flex-end; }
flex > c[as="center"] { align-self: center; }
flex > c[as="baseline"] { align-self: baseline; }
flex > c[as="stretch"] { align-self: stretch; }

/* for window width <= 600 */
@media (max-width: 600px) {
  /*  FLEX DIRECTION */
  flex[direction-s="column"] { flex-direction: column ; }
  flex[direction-s="column-reverse"] { flex-direction: column-reverse; }
  flex[direction-s="row"] { flex-direction: row; }
  flex[direction-s="row-reverse"] { flex-direction: row-reverse; }

  /* WRAPPING */
  flex[wrap-s], flex[wrap-s="wrap"] { flex-wrap: wrap; }
  flex[wrap-s="nowrap"] { flex-wrap: nowrap; }
  flex[wrap-s="reverse"] { flex-wrap: wrap-reverse; }

  /* JUSTIFICATION */
  flex[jc-s="start"] { justify-content: flex-start; }
  flex[jc-s="center"] { justify-content: center; }
  flex[jc-s="end"] { justify-content: flex-end; }
  flex[jc-s="between"] { justify-content: space-between; }
  flex[jc-s="around"] { justify-content: space-around; }

  /* ALIGN CONTENT */
  flex[ac-s="start"] { align-content: flex-start; }
  flex[ac-s="end"] { align-content: flex-end; }
  flex[ac-s="center"] { align-content: center; }
  flex[ac-s="between"] { align-content: space-between; }
  flex[ac-s="around"] { align-content: space-around; }
  flex[ac-s="stretch"] { align-content: stretch; }

  /* ALIGN ITEMS */
  flex[ai-s="start"] { align-items: start; }
  flex[ai-s="center"] { align-items: center; }
  flex[ai-s="end"] { align-items: end; }
  flex[ai-s="flex-start"] { align-items: flex-start; }
  flex[ai-s="flex-end"] { align-items: flex-end; }
  flex[ai-s="baseline"] { align-items: baseline; }
  flex[ai-s="stretch"] { align-items: stretch; }
  flex[ai-s="first-baseline"] { align-items: first baseline; }
  flex[ai-s="last-baseline"] { align-items: last baseline; }
  flex[ai-s="safe-center"] { align-items: safe center; }
  flex[ai-s="unsafe-center"] { align-items: unsafe center; }

  /* ALIGN SELF */
  flex > c[as-s="auto"] { align-self: auto; }
  flex > c[as-s="start"] { align-self: flex-start; }
  flex > c[as-s="end"] { align-self: flex-end; }
  flex > c[as-s="center"] { align-self: center; }
  flex > c[as-s="baseline"] { align-self: baseline; }
  flex > c[as-s="stretch"] { align-self: stretch; }
}

/* for window width 601px <> 1024px */
@media (min-width: 601px) and (max-width: 1024px) {
  /*  FLEX DIRECTION */
  flex[direction-m="column"] { flex-direction: column ; }
  flex[direction-m="column-reverse"] { flex-direction: column-reverse; }
  flex[direction-m="row"] { flex-direction: row; }
  flex[direction-m="row-reverse"] { flex-direction: row-reverse; }

  /* WRAPPING */
  flex[wrap-m], flex[wrap-m="wrap"] { flex-wrap: wrap; }
  flex[wrap-m="nowrap"] { flex-wrap: nowrap; }
  flex[wrap-m="reverse"] { flex-wrap: wrap-reverse; }

  /* JUSTIFICATION */
  flex[jc-m="start"] { justify-content: flex-start; }
  flex[jc-m="center"] { justify-content: center; }
  flex[jc-m="end"] { justify-content: flex-end; }
  flex[jc-m="between"] { justify-content: space-between; }
  flex[jc-m="around"] { justify-content: space-around; }

  /* ALIGN CONTENT */
  flex[ac-m="start"] { align-content: flex-start; }
  flex[ac-m="end"] { align-content: flex-end; }
  flex[ac-m="center"] { align-content: center; }
  flex[ac-m="between"] { align-content: space-between; }
  flex[ac-m="around"] { align-content: space-around; }
  flex[ac-m="stretch"] { align-content: stretch; }

  /* ALIGN ITEMS */
  flex[ai-m="start"] { align-items: start; }
  flex[ai-m="center"] { align-items: center; }
  flex[ai-m="end"] { align-items: end; }
  flex[ai-m="flex-start"] { align-items: flex-start; }
  flex[ai-m="flex-end"] { align-items: flex-end; }
  flex[ai-m="baseline"] { align-items: baseline; }
  flex[ai-m="stretch"] { align-items: stretch; }
  flex[ai-m="first-baseline"] { align-items: first baseline; }
  flex[ai-m="last-baseline"] { align-items: last baseline; }
  flex[ai-m="safe-center"] { align-items: safe center; }
  flex[ai-m="unsafe-center"] { align-items: unsafe center; }

  /* ALIGN SELF */
  flex > c[as-m="auto"] { align-self: auto; }
  flex > c[as-m="start"] { align-self: flex-start; }
  flex > c[as-m="end"] { align-self: flex-end; }
  flex > c[as-m="center"] { align-self: center; }
  flex > c[as-m="baseline"] { align-self: baseline; }
  flex > c[as-m="stretch"] { align-self: stretch; }
}

/* for window width >= 1600 */
@media (min-width: 1599px) {
  /*  FLEX DIRECTION */
  flex[direction-l="column"] { flex-direction: column ; }
  flex[direction-l="column-reverse"] { flex-direction: column-reverse; }
  flex[direction-l="row"] { flex-direction: row; }
  flex[direction-l="row-reverse"] { flex-direction: row-reverse; }

  /* WRAPPING */
  flex[wrap-l], flex[wrap-l="wrap"] { flex-wrap: wrap; }
  flex[wrap-l="nowrap"] { flex-wrap: nowrap; }
  flex[wrap-l="reverse"] { flex-wrap: wrap-reverse; }

  /* JUSTIFICATION */
  flex[jc-l="start"] { justify-content: flex-start; }
  flex[jc-l="center"] { justify-content: center; }
  flex[jc-l="end"] { justify-content: flex-end; }
  flex[jc-l="between"] { justify-content: space-between; }
  flex[jc-l="around"] { justify-content: space-around; }

  /* ALIGN CONTENT */
  flex[ac-l="start"] { align-content: flex-start; }
  flex[ac-l="end"] { align-content: flex-end; }
  flex[ac-l="center"] { align-content: center; }
  flex[ac-l="between"] { align-content: space-between; }
  flex[ac-l="around"] { align-content: space-around; }
  flex[ac-l="stretch"] { align-content: stretch; }

  /* ALIGN ITEMS */
  flex[ai-l="start"] { align-items: start; }
  flex[ai-l="center"] { align-items: center; }
  flex[ai-l="end"] { align-items: end; }
  flex[ai-l="flex-start"] { align-items: flex-start; }
  flex[ai-l="flex-end"] { align-items: flex-end; }
  flex[ai-l="baseline"] { align-items: baseline; }
  flex[ai-l="stretch"] { align-items: stretch; }
  flex[ai-l="first-baseline"] { align-items: first baseline; }
  flex[ai-l="last-baseline"] { align-items: last baseline; }
  flex[ai-l="safe-center"] { align-items: safe center; }
  flex[ai-l="unsafe-center"] { align-items: unsafe center; }

  /* ALIGN SELF */
  flex > c[as-l="auto"] { align-self: auto; }
  flex > c[as-l="start"] { align-self: flex-start; }
  flex > c[as-l="end"] { align-self: flex-end; }
  flex > c[as-l="center"] { align-self: center; }
  flex > c[as-l="baseline"] { align-self: baseline; }
  flex > c[as-l="stretch"] { align-self: stretch; }
}

/* ------------------
  Cubic Beziers
------------------ */
/*
 * Can be used both in transition:; & animation:;
 * Example: transition: all 1s var(--easeInOutQuad);
*/
:root {
    --easeInSine: cubic-bezier(0.12, 0, 0.39, 0);
    --easeOutSine: cubic-bezier(0.61, 1, 0.88, 1);
    --easeInOutSine: cubic-bezier(0.37, 0, 0.63, 1);

    --easeInQuad: cubic-bezier(0.11, 0, 0.5, 0);
    --easeOutQuad: cubic-bezier(0.5, 1, 0.89, 1);
    --easeInOutQuad: cubic-bezier(0.45, 0, 0.55, 1);

    --easeInCubic: cubic-bezier(0.32, 0, 0.67, 0);
    --easeOutCubic: cubic-bezier(0.33, 1, 0.68, 1);
    --easeInOutCubic: cubic-bezier(0.65, 0, 0.35, 1);

    --easeInQuart: cubic-bezier(0.5, 0, 0.75, 0);
    --easeOutQuart: cubic-bezier(0.25, 1, 0.5, 1);
    --easeInOutQuart: cubic-bezier(0.76, 0, 0.24, 1);

    --easeInQuint: cubic-bezier(0.64, 0, 0.78, 0);
    --easeOutQuint: cubic-bezier(0.22, 1, 0.36, 1);
    --easeInOutQuint: cubic-bezier(0.83, 0, 0.17, 1);

    --easeInExpo: cubic-bezier(0.7, 0, 0.84, 0);
    --easeOutExpo: cubic-bezier(0.16, 1, 0.3, 1);
    --easeInOutExpo: cubic-bezier(0.87, 0, 0.13, 1);

    --easeInCirc: cubic-bezier(0.55, 0, 1, 0.45);
    --easeOutCirc: cubic-bezier(0, 0.55, 0.45, 1);
    --easeInOutCirc: cubic-bezier(0.85, 0, 0.15, 1);

    --easeInBack: cubic-bezier(0.36, 0, 0.66, -0.56);
    --easeOutBack: cubic-bezier(0.34, 1.56, 0.64, 1);
    --easeInOutBack: cubic-bezier(0.68, -0.6, 0.32, 1.6);
}

/* ------------------
  animations
------------------ */
/*
 * To make it work you need: START | ANIMATION TYPE | DURATION | DELAY (optional) | CUBIC BEZIER (optional)
 * Example: <h1 start animation="fadein" ease="easeInOutCubic" style="--duration: 1s">example</h1>
*/

/** ANIMATION */
[start],
.animate {
    animation-fill-mode: both; 
    animation-name: var(--animation-name, fadeIn); /* default animation: fadeIn */
    animation-duration: var(--duration, 1s);  /* default duration: 1s */
    animation-delay: var(--delay, 0s); /* default delay: 0s */
    animation-timing-function: var(--ease, easeInOutCubic); /* default ease: easeInOutCubic */
}

/*** Cubic Bezier for ANIMATIONS • examples at: https://easings.net/ */
[ease="easeInSine"]     { --ease: var(--easeInSine); }
[ease="easeOutSine"]    { --ease: var(--easeOutSine); }
[ease="easeInOutSine"]  { --ease: var(--easeInOutSine); }

[ease="easeInQuad"]     { --ease: var(--easeInQuad); }
[ease="easeOutQuad"]    { --ease: var(--easeOutQuad); }
[ease="easeInOutQuad"]  { --ease: var(--easeInOutQuad); }

[ease="easeInCubic"]    { --ease: var(--easeInCubic); }
[ease="easeOutCubic"]   { --ease: var(--easeOutCubic); }
[ease="easeInOutCubic"] { --ease: var(--easeInOutCubic); }

[ease="easeInQuart"]    { --ease: var(--easeInQuart); }
[ease="easeOutQuart"]   { --ease: var(--easeOutQuart); }
[ease="easeInOutQuart"] { --ease: var(--easeInOutQuart); }

[ease="easeInQuint"]    { --ease: var(--easeInQuint); }
[ease="easeOutQuint"]   { --ease: var(--easeOutQuint); }
[ease="easeInOutQuint"] { --ease: var(--easeInOutQuint); }

[ease="easeInExpo"]     { --ease: var(--easeInExpo); }
[ease="easeOutExpo"]    { --ease: var(--easeOutExpo); }
[ease="easeInOutExpo"]  { --ease: var(--easeInOutExpo); }

[ease="easeInCirc"]     { --ease: var(--easeInCirc); }
[ease="easeOutCirc"]    { --ease: var(--easeOutCirc); }
[ease="easeInOutCirc"]  { --ease: var(--easeInOutCirc); }

[ease="easeInBack"]     { --ease: var(--easeInBack); }
[ease="easeOutBack"]    { --ease: var(--easeOutBack); }
[ease="easeInOutBack"]  { --ease: var(--easeInOutBack); }

/* Invisible */
.invisible, .hide { opacity: 0; }

/* Infinite Loop animation */
.infinite, .loop { animation-iteration-count: infinite; }

/* Reverse animation */
.reverse { animation-direction: reverse; }

/* Alternate animation */
.alternate { animation-direction: alternate; }

/* Alternate animation */
.alternate-reverse { animation-direction: alternate-reverse; }


/* fade in */
[animation="fadein"] { --animation-name: fadeIn; }

/* fades in slide up */
[animation="fadein-up"] { --animation-name: fadeInUp; }

/* fades in slide down */
[animation="fadein-down"] { --animation-name: fadeInDown; }

/* fades in slide from the right */
[animation="fadein-right"] { --animation-name: fadeInRight; }

/* fades in slide from the left */
[animation="fadein-left"] { --animation-name: fadeInLeft; }

/* fade out */
[animation="fadeout"] { --animation-name: fadeOut; }

/* fade out down */
[animation="fadeout-down"] { --animation-name: fadeOutDown; }

/* flash */
[animation="flash"] { --animation-name: flash; }

/* pulse */
[animation="pulse"] { --animation-name: pulse; }

/* wobble */
[animation="wobble"] { --animation-name: wobble; }

/* shake */
[animation="shake"] { --animation-name: shake; }

/* roll in  */
[animation="rollin"] { --animation-name: rollIn; }

/* roll out  */
[animation="rollout"] { --animation-name: rollOut; }

/* zoom in  */
[animation="zoomin"] { --animation-name: zoomIn; }

/* zoom out */
[animation="zoomout"] { --animation-name: zoomIn; animation-direction: reverse; }

/* zoom down  */
[animation="zoomin-down"] { --animation-name: zoomInDown; }

/* bounce */
[animation="bounce"] { --animation-name: bounce; transform-origin: center bottom; }

/* bounce in (it's like a zoom thing) */
[animation="bouncein"] { --animation-name: bounceIn; }

/* scale in */
[animation="scalein"] { --animation-name: scaleIn; backface-visibility: hidden; transform: translateZ(0px); }

/* flip */
[animation="flip"] { --animation-name: flip; backface-visibility:visible }

/* flip in left */
[animation="flipin-x"] { --animation-name: flipInX; backface-visibility:visible  }

/* flip out left  */
[animation="flipout-x"] { --animation-name: flipOutX; backface-visibility:visible }

/* flip in down */
[animation="flipin-y"] { --animation-name: flipInY; backface-visibility:visible}

/* flip out down */
[animation="flipout-y"] { --animation-name: flipOutY; backface-visibility:visible }


/**** Keyframes x Animations */

/* fade in */
@keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } }

/* fade in slide up */
@keyframes fadeInUp { 0% { opacity: 0; transform: translate3d(0, 20%, 0); } 100% { opacity: 1; transform: none; } }

/* fade in slide down */
@keyframes fadeInDown { 0% { opacity: 0; transform: translate3d(0, -20%, 0); } 100% { opacity: 1; transform: none; } }

/* fade in slide right */
@keyframes fadeInRight { 0% { opacity: 0; transform: translate3d(20%, 0, 0); } 100% { opacity: 1; transform: none; } }

/* fade in slide left */
@keyframes fadeInLeft { 0% { opacity: 0; transform: translate3d(-20%, 0, 0); } 100% { opacity: 1; transform: none; } }

/* fade out */
@keyframes fadeOut { 0% { opacity: 1; } 100% { opacity: 0; } }

/* fade out down */
@keyframes fadeOutDown { 0% { opacity: 1; } 100% { opacity: 0; transform: translate3d(0, 110%, 0); } }

/* flash */
@keyframes flash { from, 50%, to { opacity: 1; } 25%, 75% { opacity: 0; } }

/* pulse */
@keyframes pulse  { 
  0% { transform: scale3d(1,1,1); }
  50% { transform: scale3d(1.05,1.05,1.05); }
  100% { transform: scale3d(1,1,1); }
}

/* shake */
@keyframes shake  { 
  from, to { transform: translate3d(0,0,0); }
  10%, 30%, 50%, 70%, 90% { transform: translate3d(-10px,0,0); }
  20%, 40%, 60%, 80% { transform: translate3d(10px,0,0); }
}

/* roll in */
@keyframes rollIn  { from { opacity: 0; transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg); } to { opacity: 1; transform: none; } }

/* roll out */
@keyframes rollOut  { from { opacity: 1; } to { opacity: 0; transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg); } }

/* zoom in */
@keyframes zoomIn  { from { opacity: 0; transform: scale3d(.3, .3, .3); } 50% { opacity: 1; } }

/* roll in down */
@keyframes zoomInDown  { 
  0% { opacity: 0; transform: scale3d(.1, .1, .1) translate3d(0, -1000px, 0); animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190); }
  60% { opacity: 1; transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0); animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1); }
}

/* bounce */
@keyframes bounce  { 
  from, 20%, 53%, 80%, to { --ease: cubic-bezier(0.215, 0.610, 0.355, 1.000); transform: translate3d(0, 0, 0); }
  40%, 43% { --ease: cubic-bezier(0.755, 0.050, 0.855, 0.060); transform: translate3d(0, -30px, 0); }
  70% { --ease: cubic-bezier(0.755, 0.050, 0.855, 0.060); transform: translate3d(0, -15px, 0); }
  90% { transform: translate3d(0, -4px, 0); }
}

/* scale in */
@keyframes scaleIn { 
    from { opacity: 0; transform: scale(3); } 
    to { opacity: 1; transform: scale(1); } 
}

/* flip */
@keyframes flip  { 
  from { -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -360deg); transform: perspective(400px) rotate3d(0, 1, 0, -360deg); -webkit-animation-timing-function: ease-out; animation-timing-function: ease-out; }
  40% { -webkit-transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg); transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg); -webkit-animation-timing-function: ease-out; animation-timing-function: ease-out; }
  50% { -webkit-transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg); transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg); -webkit-animation-timing-function: ease-in; animation-timing-function: ease-in; }
  80% { -webkit-transform: perspective(400px) scale3d(.95, .95, .95); transform: perspective(400px) scale3d(.95, .95, .95); -webkit-animation-timing-function: ease-in; animation-timing-function: ease-in; }
  to { -webkit-transform: perspective(400px); transform: perspective(400px); -webkit-animation-timing-function: ease-in; animation-timing-function: ease-in; }
}

/* flip in x */
@keyframes flipInX  { 
  from { -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg); transform: perspective(400px) rotate3d(1, 0, 0, 90deg); -webkit-animation-timing-function: ease-in; animation-timing-function: ease-in; opacity: 0; }
  40% { -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg); transform: perspective(400px) rotate3d(1, 0, 0, -20deg); -webkit-animation-timing-function: ease-in; animation-timing-function: ease-in; }
  60% { -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 10deg); transform: perspective(400px) rotate3d(1, 0, 0, 10deg); opacity: 1; }
  80% { -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -5deg); transform: perspective(400px) rotate3d(1, 0, 0, -5deg); }
  to { -webkit-transform: perspective(400px); transform: perspective(400px); }
}

/* flip out x */
@keyframes flipOutX  { 
  from { -webkit-transform: perspective(400px); transform: perspective(400px); }
  30% { -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg); transform: perspective(400px) rotate3d(1, 0, 0, -20deg); opacity: 1; }
  to { -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg); transform: perspective(400px) rotate3d(1, 0, 0, 90deg); opacity: 0; }
}

/* flip in y */
@keyframes flipInY  { 
  from { -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg); transform: perspective(400px) rotate3d(0, 1, 0, 90deg); -webkit-animation-timing-function: ease-in; animation-timing-function: ease-in; opacity: 0; }
  40% { -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -20deg); transform: perspective(400px) rotate3d(0, 1, 0, -20deg); -webkit-animation-timing-function: ease-in; animation-timing-function: ease-in; }
  60% { -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 10deg); transform: perspective(400px) rotate3d(0, 1, 0, 10deg); opacity: 1; }
  80% { -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -5deg); transform: perspective(400px) rotate3d(0, 1, 0, -5deg); }
  to { -webkit-transform: perspective(400px); transform: perspective(400px); }
}

/* flip out y */
@keyframes flipOutY  { 
  from { -webkit-transform: perspective(400px); transform: perspective(400px); }
  30% { -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -15deg); transform: perspective(400px) rotate3d(0, 1, 0, -15deg); opacity: 1; }
  to { -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg); transform: perspective(400px) rotate3d(0, 1, 0, 90deg); opacity: 0; }
}

/* wobble */
@keyframes wobble {
  from { -webkit-transform: none; transform: none; }
  15% { -webkit-transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg); transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);}
  30% { -webkit-transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg); transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);}
  45% { -webkit-transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg); transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg); }
  60% { -webkit-transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg); transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg); }
  75% { -webkit-transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg); transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg); }
  to { -webkit-transform: none; transform: none; }
}

/* bounce in */
@keyframes bounceIn {
  from, 20%, 40%, 60%, 80%, to {-webkit-animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000); animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000); }
  0% { opacity: 0; -webkit-transform: scale3d(.3, .3, .3); transform: scale3d(.3, .3, .3); }
  20% { -webkit-transform: scale3d(1.1, 1.1, 1.1); transform: scale3d(1.1, 1.1, 1.1); }
  40% { -webkit-transform: scale3d(.9, .9, .9); transform: scale3d(.9, .9, .9); }
  60% { opacity: 1; -webkit-transform: scale3d(1.03, 1.03, 1.03); transform: scale3d(1.03, 1.03, 1.03); }
  80% { -webkit-transform: scale3d(.97, .97, .97); transform: scale3d(.97, .97, .97); }
  to { opacity: 1; -webkit-transform: scale3d(1, 1, 1); transform: scale3d(1, 1, 1); }
}